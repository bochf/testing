// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClioServerStatus {

namespace {

const ::google::protobuf::Descriptor* ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerStatus_E_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  ServerStatus_descriptor_ = file->message_type(0);
  static const int ServerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, proc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, status_),
  };
  ServerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStatus_descriptor_,
      ServerStatus::default_instance_,
      ServerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _internal_metadata_),
      -1);
  ServerStatus_E_STATUS_descriptor_ = ServerStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStatus_descriptor_, &ServerStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  delete ServerStatus::default_instance_;
  delete ServerStatus_reflection_;
}

void protobuf_AddDesc_server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\020ClioServerStatus\"\254\001\n\014Ser"
    "verStatus\022\021\n\tproc_name\030\001 \002(\t\022\021\n\thost_nam"
    "e\030\002 \002(\t\022\022\n\nip_address\030\003 \002(\t\0227\n\006status\030\004 "
    "\002(\0162\'.ClioServerStatus.ServerStatus.E_ST"
    "ATUS\")\n\010E_STATUS\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\013\n\007SU"
    "SPEND\020\002", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  ServerStatus::default_instance_ = new ServerStatus();
  ServerStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerStatus_E_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_E_STATUS_descriptor_;
}
bool ServerStatus_E_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerStatus_E_STATUS ServerStatus::UP;
const ServerStatus_E_STATUS ServerStatus::DOWN;
const ServerStatus_E_STATUS ServerStatus::SUSPEND;
const ServerStatus_E_STATUS ServerStatus::E_STATUS_MIN;
const ServerStatus_E_STATUS ServerStatus::E_STATUS_MAX;
const int ServerStatus::E_STATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerStatus::kProcNameFieldNumber;
const int ServerStatus::kHostNameFieldNumber;
const int ServerStatus::kIpAddressFieldNumber;
const int ServerStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

ServerStatus::ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioServerStatus.ServerStatus)
}

void ServerStatus::InitAsDefaultInstance() {
}

ServerStatus::ServerStatus(const ServerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioServerStatus.ServerStatus)
}

void ServerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatus::~ServerStatus() {
  // @@protoc_insertion_point(destructor:ClioServerStatus.ServerStatus)
  SharedDtor();
}

void ServerStatus::SharedDtor() {
  proc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_descriptor_;
}

const ServerStatus& ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ServerStatus* ServerStatus::default_instance_ = NULL;

ServerStatus* ServerStatus::New(::google::protobuf::Arena* arena) const {
  ServerStatus* n = new ServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatus::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_proc_name()) {
      proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_host_name()) {
      host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip_address()) {
      ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioServerStatus.ServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string proc_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc_name().data(), this->proc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioServerStatus.ServerStatus.proc_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // required string host_name = 2;
      case 2: {
        if (tag == 18) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioServerStatus.ServerStatus.host_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_address;
        break;
      }

      // required string ip_address = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioServerStatus.ServerStatus.ip_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClioServerStatus::ServerStatus_E_STATUS_IsValid(value)) {
            set_status(static_cast< ::ClioServerStatus::ServerStatus_E_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioServerStatus.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioServerStatus.ServerStatus)
  return false;
#undef DO_
}

void ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioServerStatus.ServerStatus)
  // required string proc_name = 1;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.proc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proc_name(), output);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_name(), output);
  }

  // required string ip_address = 3;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_address(), output);
  }

  // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClioServerStatus.ServerStatus)
}

::google::protobuf::uint8* ServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioServerStatus.ServerStatus)
  // required string proc_name = 1;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.proc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proc_name(), target);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  // required string ip_address = 3;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioServerStatus.ServerStatus.ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_address(), target);
  }

  // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClioServerStatus.ServerStatus)
  return target;
}

int ServerStatus::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_proc_name()) {
    // required string proc_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_name());
  }

  if (has_host_name()) {
    // required string host_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  if (has_ip_address()) {
    // required string ip_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());
  }

  if (has_status()) {
    // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int ServerStatus::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string proc_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_name());

    // required string host_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());

    // required string ip_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());

    // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatus::MergeFrom(const ServerStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_name()) {
      set_has_proc_name();
      proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
    }
    if (from.has_host_name()) {
      set_has_host_name();
      host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (from.has_ip_address()) {
      set_has_ip_address();
      ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerStatus::Swap(ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatus::InternalSwap(ServerStatus* other) {
  proc_name_.Swap(&other->proc_name_);
  host_name_.Swap(&other->host_name_);
  ip_address_.Swap(&other->ip_address_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatus_descriptor_;
  metadata.reflection = ServerStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatus

// required string proc_name = 1;
bool ServerStatus::has_proc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerStatus::set_has_proc_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerStatus::clear_has_proc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerStatus::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_name();
}
 const ::std::string& ServerStatus::proc_name() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.proc_name)
  return proc_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_proc_name(const ::std::string& value) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.proc_name)
}
 void ServerStatus::set_proc_name(const char* value) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.proc_name)
}
 void ServerStatus::set_proc_name(const char* value, size_t size) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.proc_name)
}
 ::std::string* ServerStatus::mutable_proc_name() {
  set_has_proc_name();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerStatus::release_proc_name() {
  clear_has_proc_name();
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    set_has_proc_name();
  } else {
    clear_has_proc_name();
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.proc_name)
}

// required string host_name = 2;
bool ServerStatus::has_host_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerStatus::set_has_host_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerStatus::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerStatus::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_name();
}
 const ::std::string& ServerStatus::host_name() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.host_name)
  return host_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_host_name(const ::std::string& value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.host_name)
}
 void ServerStatus::set_host_name(const char* value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.host_name)
}
 void ServerStatus::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.host_name)
}
 ::std::string* ServerStatus::mutable_host_name() {
  set_has_host_name();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerStatus::release_host_name() {
  clear_has_host_name();
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    set_has_host_name();
  } else {
    clear_has_host_name();
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.host_name)
}

// required string ip_address = 3;
bool ServerStatus::has_ip_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerStatus::set_has_ip_address() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerStatus::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerStatus::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_address();
}
 const ::std::string& ServerStatus::ip_address() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.ip_address)
}
 void ServerStatus::set_ip_address(const char* value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.ip_address)
}
 void ServerStatus::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.ip_address)
}
 ::std::string* ServerStatus::mutable_ip_address() {
  set_has_ip_address();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerStatus::release_ip_address() {
  clear_has_ip_address();
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStatus::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    set_has_ip_address();
  } else {
    clear_has_ip_address();
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.ip_address)
}

// required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
bool ServerStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::ClioServerStatus::ServerStatus_E_STATUS ServerStatus::status() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.status)
  return static_cast< ::ClioServerStatus::ServerStatus_E_STATUS >(status_);
}
 void ServerStatus::set_status(::ClioServerStatus::ServerStatus_E_STATUS value) {
  assert(::ClioServerStatus::ServerStatus_E_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioServerStatus

// @@protoc_insertion_point(global_scope)
