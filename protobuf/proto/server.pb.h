// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ClioServerStatus {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class ServerStatus;

enum ServerStatus_E_STATUS {
  ServerStatus_E_STATUS_UP = 0,
  ServerStatus_E_STATUS_DOWN = 1,
  ServerStatus_E_STATUS_SUSPEND = 2
};
bool ServerStatus_E_STATUS_IsValid(int value);
const ServerStatus_E_STATUS ServerStatus_E_STATUS_E_STATUS_MIN = ServerStatus_E_STATUS_UP;
const ServerStatus_E_STATUS ServerStatus_E_STATUS_E_STATUS_MAX = ServerStatus_E_STATUS_SUSPEND;
const int ServerStatus_E_STATUS_E_STATUS_ARRAYSIZE = ServerStatus_E_STATUS_E_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerStatus_E_STATUS_descriptor();
inline const ::std::string& ServerStatus_E_STATUS_Name(ServerStatus_E_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerStatus_E_STATUS_descriptor(), value);
}
inline bool ServerStatus_E_STATUS_Parse(
    const ::std::string& name, ServerStatus_E_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerStatus_E_STATUS>(
    ServerStatus_E_STATUS_descriptor(), name, value);
}
// ===================================================================

class ServerStatus : public ::google::protobuf::Message {
 public:
  ServerStatus();
  virtual ~ServerStatus();

  ServerStatus(const ServerStatus& from);

  inline ServerStatus& operator=(const ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStatus& default_instance();

  void Swap(ServerStatus* other);

  // implements Message ----------------------------------------------

  inline ServerStatus* New() const { return New(NULL); }

  ServerStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerStatus& from);
  void MergeFrom(const ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerStatus_E_STATUS E_STATUS;
  static const E_STATUS UP = ServerStatus_E_STATUS_UP;
  static const E_STATUS DOWN = ServerStatus_E_STATUS_DOWN;
  static const E_STATUS SUSPEND = ServerStatus_E_STATUS_SUSPEND;
  static inline bool E_STATUS_IsValid(int value) {
    return ServerStatus_E_STATUS_IsValid(value);
  }
  static const E_STATUS E_STATUS_MIN =
    ServerStatus_E_STATUS_E_STATUS_MIN;
  static const E_STATUS E_STATUS_MAX =
    ServerStatus_E_STATUS_E_STATUS_MAX;
  static const int E_STATUS_ARRAYSIZE =
    ServerStatus_E_STATUS_E_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_STATUS_descriptor() {
    return ServerStatus_E_STATUS_descriptor();
  }
  static inline const ::std::string& E_STATUS_Name(E_STATUS value) {
    return ServerStatus_E_STATUS_Name(value);
  }
  static inline bool E_STATUS_Parse(const ::std::string& name,
      E_STATUS* value) {
    return ServerStatus_E_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string proc_name = 1;
  bool has_proc_name() const;
  void clear_proc_name();
  static const int kProcNameFieldNumber = 1;
  const ::std::string& proc_name() const;
  void set_proc_name(const ::std::string& value);
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  ::std::string* mutable_proc_name();
  ::std::string* release_proc_name();
  void set_allocated_proc_name(::std::string* proc_name);

  // required string host_name = 2;
  bool has_host_name() const;
  void clear_host_name();
  static const int kHostNameFieldNumber = 2;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // required string ip_address = 3;
  bool has_ip_address() const;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 3;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::ClioServerStatus::ServerStatus_E_STATUS status() const;
  void set_status(::ClioServerStatus::ServerStatus_E_STATUS value);

  // @@protoc_insertion_point(class_scope:ClioServerStatus.ServerStatus)
 private:
  inline void set_has_proc_name();
  inline void clear_has_proc_name();
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_ip_address();
  inline void clear_has_ip_address();
  inline void set_has_status();
  inline void clear_has_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr proc_name_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  int status_;
  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ServerStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatus

// required string proc_name = 1;
inline bool ServerStatus::has_proc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerStatus::set_has_proc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerStatus::clear_has_proc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerStatus::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_name();
}
inline const ::std::string& ServerStatus::proc_name() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.proc_name)
  return proc_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_proc_name(const ::std::string& value) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.proc_name)
}
inline void ServerStatus::set_proc_name(const char* value) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.proc_name)
}
inline void ServerStatus::set_proc_name(const char* value, size_t size) {
  set_has_proc_name();
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.proc_name)
}
inline ::std::string* ServerStatus::mutable_proc_name() {
  set_has_proc_name();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStatus::release_proc_name() {
  clear_has_proc_name();
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    set_has_proc_name();
  } else {
    clear_has_proc_name();
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.proc_name)
}

// required string host_name = 2;
inline bool ServerStatus::has_host_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerStatus::set_has_host_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerStatus::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerStatus::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_name();
}
inline const ::std::string& ServerStatus::host_name() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.host_name)
  return host_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_host_name(const ::std::string& value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.host_name)
}
inline void ServerStatus::set_host_name(const char* value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.host_name)
}
inline void ServerStatus::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.host_name)
}
inline ::std::string* ServerStatus::mutable_host_name() {
  set_has_host_name();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStatus::release_host_name() {
  clear_has_host_name();
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    set_has_host_name();
  } else {
    clear_has_host_name();
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.host_name)
}

// required string ip_address = 3;
inline bool ServerStatus::has_ip_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerStatus::set_has_ip_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerStatus::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerStatus::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_address();
}
inline const ::std::string& ServerStatus::ip_address() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.ip_address)
}
inline void ServerStatus::set_ip_address(const char* value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioServerStatus.ServerStatus.ip_address)
}
inline void ServerStatus::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioServerStatus.ServerStatus.ip_address)
}
inline ::std::string* ServerStatus::mutable_ip_address() {
  set_has_ip_address();
  // @@protoc_insertion_point(field_mutable:ClioServerStatus.ServerStatus.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStatus::release_ip_address() {
  clear_has_ip_address();
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    set_has_ip_address();
  } else {
    clear_has_ip_address();
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:ClioServerStatus.ServerStatus.ip_address)
}

// required .ClioServerStatus.ServerStatus.E_STATUS status = 4;
inline bool ServerStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::ClioServerStatus::ServerStatus_E_STATUS ServerStatus::status() const {
  // @@protoc_insertion_point(field_get:ClioServerStatus.ServerStatus.status)
  return static_cast< ::ClioServerStatus::ServerStatus_E_STATUS >(status_);
}
inline void ServerStatus::set_status(::ClioServerStatus::ServerStatus_E_STATUS value) {
  assert(::ClioServerStatus::ServerStatus_E_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ClioServerStatus.ServerStatus.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioServerStatus

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClioServerStatus::ServerStatus_E_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClioServerStatus::ServerStatus_E_STATUS>() {
  return ::ClioServerStatus::ServerStatus_E_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
