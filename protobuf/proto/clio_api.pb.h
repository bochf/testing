// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clio_api.proto

#ifndef PROTOBUF_clio_5fapi_2eproto__INCLUDED
#define PROTOBUF_clio_5fapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace ClioApi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_clio_5fapi_2eproto();
void protobuf_AssignDesc_clio_5fapi_2eproto();
void protobuf_ShutdownFile_clio_5fapi_2eproto();

class ClioMsgHeader;
class ClioNotify;
class ClioRequest;
class ClioResponse;
class ClioApi;
class ClioServerStatus;

enum ClioServerStatus_E_STATUS {
  ClioServerStatus_E_STATUS_UP = 0,
  ClioServerStatus_E_STATUS_DOWN = 1,
  ClioServerStatus_E_STATUS_SUSPEND = 2,
  ClioServerStatus_E_STATUS_ClioServerStatus_E_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClioServerStatus_E_STATUS_ClioServerStatus_E_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClioServerStatus_E_STATUS_IsValid(int value);
const ClioServerStatus_E_STATUS ClioServerStatus_E_STATUS_E_STATUS_MIN = ClioServerStatus_E_STATUS_UP;
const ClioServerStatus_E_STATUS ClioServerStatus_E_STATUS_E_STATUS_MAX = ClioServerStatus_E_STATUS_SUSPEND;
const int ClioServerStatus_E_STATUS_E_STATUS_ARRAYSIZE = ClioServerStatus_E_STATUS_E_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClioServerStatus_E_STATUS_descriptor();
inline const ::std::string& ClioServerStatus_E_STATUS_Name(ClioServerStatus_E_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClioServerStatus_E_STATUS_descriptor(), value);
}
inline bool ClioServerStatus_E_STATUS_Parse(
    const ::std::string& name, ClioServerStatus_E_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClioServerStatus_E_STATUS>(
    ClioServerStatus_E_STATUS_descriptor(), name, value);
}
enum MessageType {
  A2C_REQ_RECORDING = 0,
  A2C_START_RECORDING = 1,
  A2C_STOP_RECORDING = 2,
  C2A_NOTIFY = 20000,
  C2A_SERVER_STATUS = 20001,
  C2A_RSP_RECORDING = 30000,
  C2A_RSP_RECORDING_STARTED = 30001,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = A2C_REQ_RECORDING;
const MessageType MessageType_MAX = C2A_RSP_RECORDING_STARTED;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class ClioMsgHeader : public ::google::protobuf::Message {
 public:
  ClioMsgHeader();
  virtual ~ClioMsgHeader();

  ClioMsgHeader(const ClioMsgHeader& from);

  inline ClioMsgHeader& operator=(const ClioMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioMsgHeader& default_instance();

  void Swap(ClioMsgHeader* other);

  // implements Message ----------------------------------------------

  inline ClioMsgHeader* New() const { return New(NULL); }

  ClioMsgHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioMsgHeader& from);
  void MergeFrom(const ClioMsgHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioMsgHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg_name = 1;
  void clear_msg_name();
  static const int kMsgNameFieldNumber = 1;
  const ::std::string& msg_name() const;
  void set_msg_name(const ::std::string& value);
  void set_msg_name(const char* value);
  void set_msg_name(const char* value, size_t size);
  ::std::string* mutable_msg_name();
  ::std::string* release_msg_name();
  void set_allocated_msg_name(::std::string* msg_name);

  // optional string proc_name = 2;
  void clear_proc_name();
  static const int kProcNameFieldNumber = 2;
  const ::std::string& proc_name() const;
  void set_proc_name(const ::std::string& value);
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  ::std::string* mutable_proc_name();
  ::std::string* release_proc_name();
  void set_allocated_proc_name(::std::string* proc_name);

  // optional string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional int32 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional bytes check_sum = 6;
  void clear_check_sum();
  static const int kCheckSumFieldNumber = 6;
  const ::std::string& check_sum() const;
  void set_check_sum(const ::std::string& value);
  void set_check_sum(const char* value);
  void set_check_sum(const void* value, size_t size);
  ::std::string* mutable_check_sum();
  ::std::string* release_check_sum();
  void set_allocated_check_sum(::std::string* check_sum);

  // @@protoc_insertion_point(class_scope:ClioApi.ClioMsgHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_name_;
  ::google::protobuf::internal::ArenaStringPtr proc_name_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr check_sum_;
  ::google::protobuf::int32 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioMsgHeader* default_instance_;
};
// -------------------------------------------------------------------

class ClioNotify : public ::google::protobuf::Message {
 public:
  ClioNotify();
  virtual ~ClioNotify();

  ClioNotify(const ClioNotify& from);

  inline ClioNotify& operator=(const ClioNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioNotify& default_instance();

  void Swap(ClioNotify* other);

  // implements Message ----------------------------------------------

  inline ClioNotify* New() const { return New(NULL); }

  ClioNotify* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioNotify& from);
  void MergeFrom(const ClioNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClioApi.ClioMsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ClioApi::ClioMsgHeader& header() const;
  ::ClioApi::ClioMsgHeader* mutable_header();
  ::ClioApi::ClioMsgHeader* release_header();
  void set_allocated_header(::ClioApi::ClioMsgHeader* header);

  // optional bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:ClioApi.ClioNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ClioApi::ClioMsgHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioNotify* default_instance_;
};
// -------------------------------------------------------------------

class ClioRequest : public ::google::protobuf::Message {
 public:
  ClioRequest();
  virtual ~ClioRequest();

  ClioRequest(const ClioRequest& from);

  inline ClioRequest& operator=(const ClioRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioRequest& default_instance();

  void Swap(ClioRequest* other);

  // implements Message ----------------------------------------------

  inline ClioRequest* New() const { return New(NULL); }

  ClioRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioRequest& from);
  void MergeFrom(const ClioRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClioApi.ClioMsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ClioApi::ClioMsgHeader& header() const;
  ::ClioApi::ClioMsgHeader* mutable_header();
  ::ClioApi::ClioMsgHeader* release_header();
  void set_allocated_header(::ClioApi::ClioMsgHeader* header);

  // optional string transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // optional int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // optional string contact = 4;
  void clear_contact();
  static const int kContactFieldNumber = 4;
  const ::std::string& contact() const;
  void set_contact(const ::std::string& value);
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  ::std::string* mutable_contact();
  ::std::string* release_contact();
  void set_allocated_contact(::std::string* contact);

  // optional int32 request_type = 5;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 5;
  ::google::protobuf::int32 request_type() const;
  void set_request_type(::google::protobuf::int32 value);

  // optional bytes body = 6;
  void clear_body();
  static const int kBodyFieldNumber = 6;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:ClioApi.ClioRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ClioApi::ClioMsgHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::internal::ArenaStringPtr contact_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 request_type_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClioResponse : public ::google::protobuf::Message {
 public:
  ClioResponse();
  virtual ~ClioResponse();

  ClioResponse(const ClioResponse& from);

  inline ClioResponse& operator=(const ClioResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioResponse& default_instance();

  void Swap(ClioResponse* other);

  // implements Message ----------------------------------------------

  inline ClioResponse* New() const { return New(NULL); }

  ClioResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioResponse& from);
  void MergeFrom(const ClioResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClioApi.ClioMsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ClioApi::ClioMsgHeader& header() const;
  ::ClioApi::ClioMsgHeader* mutable_header();
  ::ClioApi::ClioMsgHeader* release_header();
  void set_allocated_header(::ClioApi::ClioMsgHeader* header);

  // optional string transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // optional int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // optional bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:ClioApi.ClioResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ClioApi::ClioMsgHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 seq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioResponse* default_instance_;
};
// -------------------------------------------------------------------

class ClioApi : public ::google::protobuf::Message {
 public:
  ClioApi();
  virtual ~ClioApi();

  ClioApi(const ClioApi& from);

  inline ClioApi& operator=(const ClioApi& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioApi& default_instance();

  enum ClioApiCase {
    kNotify = 1,
    kRequest = 2,
    kResponse = 3,
    CLIO_API_NOT_SET = 0,
  };

  void Swap(ClioApi* other);

  // implements Message ----------------------------------------------

  inline ClioApi* New() const { return New(NULL); }

  ClioApi* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioApi& from);
  void MergeFrom(const ClioApi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioApi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClioApi.ClioNotify notify = 1;
  bool has_notify() const;
  void clear_notify();
  static const int kNotifyFieldNumber = 1;
  const ::ClioApi::ClioNotify& notify() const;
  ::ClioApi::ClioNotify* mutable_notify();
  ::ClioApi::ClioNotify* release_notify();
  void set_allocated_notify(::ClioApi::ClioNotify* notify);

  // optional .ClioApi.ClioRequest request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::ClioApi::ClioRequest& request() const;
  ::ClioApi::ClioRequest* mutable_request();
  ::ClioApi::ClioRequest* release_request();
  void set_allocated_request(::ClioApi::ClioRequest* request);

  // optional .ClioApi.ClioResponse response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::ClioApi::ClioResponse& response() const;
  ::ClioApi::ClioResponse* mutable_response();
  ::ClioApi::ClioResponse* release_response();
  void set_allocated_response(::ClioApi::ClioResponse* response);

  ClioApiCase clio_api_case() const;
  // @@protoc_insertion_point(class_scope:ClioApi.ClioApi)
 private:
  inline void set_has_notify();
  inline void set_has_request();
  inline void set_has_response();

  inline bool has_clio_api() const;
  void clear_clio_api();
  inline void clear_has_clio_api();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ClioApiUnion {
    ClioApiUnion() {}
    ::ClioApi::ClioNotify* notify_;
    ::ClioApi::ClioRequest* request_;
    ::ClioApi::ClioResponse* response_;
  } clio_api_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioApi* default_instance_;
};
// -------------------------------------------------------------------

class ClioServerStatus : public ::google::protobuf::Message {
 public:
  ClioServerStatus();
  virtual ~ClioServerStatus();

  ClioServerStatus(const ClioServerStatus& from);

  inline ClioServerStatus& operator=(const ClioServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioServerStatus& default_instance();

  void Swap(ClioServerStatus* other);

  // implements Message ----------------------------------------------

  inline ClioServerStatus* New() const { return New(NULL); }

  ClioServerStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioServerStatus& from);
  void MergeFrom(const ClioServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClioServerStatus_E_STATUS E_STATUS;
  static const E_STATUS UP = ClioServerStatus_E_STATUS_UP;
  static const E_STATUS DOWN = ClioServerStatus_E_STATUS_DOWN;
  static const E_STATUS SUSPEND = ClioServerStatus_E_STATUS_SUSPEND;
  static inline bool E_STATUS_IsValid(int value) {
    return ClioServerStatus_E_STATUS_IsValid(value);
  }
  static const E_STATUS E_STATUS_MIN =
    ClioServerStatus_E_STATUS_E_STATUS_MIN;
  static const E_STATUS E_STATUS_MAX =
    ClioServerStatus_E_STATUS_E_STATUS_MAX;
  static const int E_STATUS_ARRAYSIZE =
    ClioServerStatus_E_STATUS_E_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_STATUS_descriptor() {
    return ClioServerStatus_E_STATUS_descriptor();
  }
  static inline const ::std::string& E_STATUS_Name(E_STATUS value) {
    return ClioServerStatus_E_STATUS_Name(value);
  }
  static inline bool E_STATUS_Parse(const ::std::string& name,
      E_STATUS* value) {
    return ClioServerStatus_E_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClioApi::ClioServerStatus_E_STATUS status() const;
  void set_status(::ClioApi::ClioServerStatus_E_STATUS value);

  // @@protoc_insertion_point(class_scope:ClioApi.ClioServerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_clio_5fapi_2eproto();
  friend void protobuf_AssignDesc_clio_5fapi_2eproto();
  friend void protobuf_ShutdownFile_clio_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ClioServerStatus* default_instance_;
};
// ===================================================================

class ClioAgent_Stub;

class ClioAgent : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClioAgent() {};
 public:
  virtual ~ClioAgent();

  typedef ClioAgent_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void OnNotify(::google::protobuf::RpcController* controller,
                       const ::ClioApi::ClioNotify* request,
                       ::ClioApi::ClioResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OnRequest(::google::protobuf::RpcController* controller,
                       const ::ClioApi::ClioRequest* request,
                       ::ClioApi::ClioResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClioAgent);
};

class ClioAgent_Stub : public ClioAgent {
 public:
  ClioAgent_Stub(::google::protobuf::RpcChannel* channel);
  ClioAgent_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ClioAgent_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ClioAgent ------------------------------------------

  void OnNotify(::google::protobuf::RpcController* controller,
                       const ::ClioApi::ClioNotify* request,
                       ::ClioApi::ClioResponse* response,
                       ::google::protobuf::Closure* done);
  void OnRequest(::google::protobuf::RpcController* controller,
                       const ::ClioApi::ClioRequest* request,
                       ::ClioApi::ClioResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClioAgent_Stub);
};


// ===================================================================

static const int kServiceIdFieldNumber = 1000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  service_id;
static const int kMethodIdFieldNumber = 1000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  method_id;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioMsgHeader

// optional string msg_name = 1;
inline void ClioMsgHeader::clear_msg_name() {
  msg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioMsgHeader::msg_name() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.msg_name)
  return msg_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_msg_name(const ::std::string& value) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.msg_name)
}
inline void ClioMsgHeader::set_msg_name(const char* value) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.msg_name)
}
inline void ClioMsgHeader::set_msg_name(const char* value, size_t size) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.msg_name)
}
inline ::std::string* ClioMsgHeader::mutable_msg_name() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.msg_name)
  return msg_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioMsgHeader::release_msg_name() {
  
  return msg_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_allocated_msg_name(::std::string* msg_name) {
  if (msg_name != NULL) {
    
  } else {
    
  }
  msg_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_name);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.msg_name)
}

// optional string proc_name = 2;
inline void ClioMsgHeader::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioMsgHeader::proc_name() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.proc_name)
  return proc_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_proc_name(const ::std::string& value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.proc_name)
}
inline void ClioMsgHeader::set_proc_name(const char* value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.proc_name)
}
inline void ClioMsgHeader::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.proc_name)
}
inline ::std::string* ClioMsgHeader::mutable_proc_name() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioMsgHeader::release_proc_name() {
  
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.proc_name)
}

// optional string from = 3;
inline void ClioMsgHeader::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioMsgHeader::from() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.from)
}
inline void ClioMsgHeader::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.from)
}
inline void ClioMsgHeader::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.from)
}
inline ::std::string* ClioMsgHeader::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioMsgHeader::release_from() {
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.from)
}

// optional string to = 4;
inline void ClioMsgHeader::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioMsgHeader::to() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.to)
}
inline void ClioMsgHeader::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.to)
}
inline void ClioMsgHeader::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.to)
}
inline ::std::string* ClioMsgHeader::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioMsgHeader::release_to() {
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.to)
}

// optional int32 timestamp = 5;
inline void ClioMsgHeader::clear_timestamp() {
  timestamp_ = 0;
}
inline ::google::protobuf::int32 ClioMsgHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.timestamp)
  return timestamp_;
}
inline void ClioMsgHeader::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.timestamp)
}

// optional bytes check_sum = 6;
inline void ClioMsgHeader::clear_check_sum() {
  check_sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioMsgHeader::check_sum() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.check_sum)
  return check_sum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_check_sum(const ::std::string& value) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.check_sum)
}
inline void ClioMsgHeader::set_check_sum(const char* value) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.check_sum)
}
inline void ClioMsgHeader::set_check_sum(const void* value, size_t size) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.check_sum)
}
inline ::std::string* ClioMsgHeader::mutable_check_sum() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.check_sum)
  return check_sum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioMsgHeader::release_check_sum() {
  
  return check_sum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioMsgHeader::set_allocated_check_sum(::std::string* check_sum) {
  if (check_sum != NULL) {
    
  } else {
    
  }
  check_sum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), check_sum);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.check_sum)
}

// -------------------------------------------------------------------

// ClioNotify

// optional .ClioApi.ClioMsgHeader header = 1;
inline bool ClioNotify::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ClioNotify::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::ClioApi::ClioMsgHeader& ClioNotify::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioNotify.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ClioApi::ClioMsgHeader* ClioNotify::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioNotify.header)
  return header_;
}
inline ::ClioApi::ClioMsgHeader* ClioNotify::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ClioNotify::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioNotify.header)
}

// optional bytes body = 2;
inline void ClioNotify::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioNotify::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioNotify.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioNotify::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioNotify.body)
}
inline void ClioNotify::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioNotify.body)
}
inline void ClioNotify::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioNotify.body)
}
inline ::std::string* ClioNotify::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioNotify.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioNotify::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioNotify::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioNotify.body)
}

// -------------------------------------------------------------------

// ClioRequest

// optional .ClioApi.ClioMsgHeader header = 1;
inline bool ClioRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ClioRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::ClioApi::ClioMsgHeader& ClioRequest::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ClioApi::ClioMsgHeader* ClioRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.header)
  return header_;
}
inline ::ClioApi::ClioMsgHeader* ClioRequest::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ClioRequest::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.header)
}

// optional string transaction_id = 2;
inline void ClioRequest::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_transaction_id(const ::std::string& value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.transaction_id)
}
inline void ClioRequest::set_transaction_id(const char* value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.transaction_id)
}
inline void ClioRequest::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.transaction_id)
}
inline ::std::string* ClioRequest::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioRequest::release_transaction_id() {
  
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.transaction_id)
}

// optional int32 seq = 3;
inline void ClioRequest::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 ClioRequest::seq() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.seq)
  return seq_;
}
inline void ClioRequest::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.seq)
}

// optional string contact = 4;
inline void ClioRequest::clear_contact() {
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioRequest::contact() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.contact)
  return contact_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_contact(const ::std::string& value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.contact)
}
inline void ClioRequest::set_contact(const char* value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.contact)
}
inline void ClioRequest::set_contact(const char* value, size_t size) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.contact)
}
inline ::std::string* ClioRequest::mutable_contact() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.contact)
  return contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioRequest::release_contact() {
  
  return contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_allocated_contact(::std::string* contact) {
  if (contact != NULL) {
    
  } else {
    
  }
  contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.contact)
}

// optional int32 request_type = 5;
inline void ClioRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::google::protobuf::int32 ClioRequest::request_type() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.request_type)
  return request_type_;
}
inline void ClioRequest::set_request_type(::google::protobuf::int32 value) {
  
  request_type_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.request_type)
}

// optional bytes body = 6;
inline void ClioRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioRequest::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.body)
}
inline void ClioRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.body)
}
inline void ClioRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.body)
}
inline ::std::string* ClioRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioRequest::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.body)
}

// -------------------------------------------------------------------

// ClioResponse

// optional .ClioApi.ClioMsgHeader header = 1;
inline bool ClioResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ClioResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::ClioApi::ClioMsgHeader& ClioResponse::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ClioApi::ClioMsgHeader* ClioResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.header)
  return header_;
}
inline ::ClioApi::ClioMsgHeader* ClioResponse::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ClioResponse::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.header)
}

// optional string transaction_id = 2;
inline void ClioResponse::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioResponse::set_transaction_id(const ::std::string& value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.transaction_id)
}
inline void ClioResponse::set_transaction_id(const char* value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioResponse.transaction_id)
}
inline void ClioResponse::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioResponse.transaction_id)
}
inline ::std::string* ClioResponse::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioResponse::release_transaction_id() {
  
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioResponse::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.transaction_id)
}

// optional int32 seq = 3;
inline void ClioResponse::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 ClioResponse::seq() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.seq)
  return seq_;
}
inline void ClioResponse::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.seq)
}

// optional bytes body = 4;
inline void ClioResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClioResponse::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.body)
}
inline void ClioResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioResponse.body)
}
inline void ClioResponse::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioResponse.body)
}
inline ::std::string* ClioResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioResponse::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.body)
}

// -------------------------------------------------------------------

// ClioApi

// optional .ClioApi.ClioNotify notify = 1;
inline bool ClioApi::has_notify() const {
  return clio_api_case() == kNotify;
}
inline void ClioApi::set_has_notify() {
  _oneof_case_[0] = kNotify;
}
inline void ClioApi::clear_notify() {
  if (has_notify()) {
    delete clio_api_.notify_;
    clear_has_clio_api();
  }
}
inline const ::ClioApi::ClioNotify& ClioApi::notify() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.notify)
  return has_notify() ? *clio_api_.notify_
                      : ::ClioApi::ClioNotify::default_instance();
}
inline ::ClioApi::ClioNotify* ClioApi::mutable_notify() {
  if (!has_notify()) {
    clear_clio_api();
    set_has_notify();
    clio_api_.notify_ = new ::ClioApi::ClioNotify;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.notify)
  return clio_api_.notify_;
}
inline ::ClioApi::ClioNotify* ClioApi::release_notify() {
  if (has_notify()) {
    clear_has_clio_api();
    ::ClioApi::ClioNotify* temp = clio_api_.notify_;
    clio_api_.notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClioApi::set_allocated_notify(::ClioApi::ClioNotify* notify) {
  clear_clio_api();
  if (notify) {
    set_has_notify();
    clio_api_.notify_ = notify;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.notify)
}

// optional .ClioApi.ClioRequest request = 2;
inline bool ClioApi::has_request() const {
  return clio_api_case() == kRequest;
}
inline void ClioApi::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void ClioApi::clear_request() {
  if (has_request()) {
    delete clio_api_.request_;
    clear_has_clio_api();
  }
}
inline const ::ClioApi::ClioRequest& ClioApi::request() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.request)
  return has_request() ? *clio_api_.request_
                      : ::ClioApi::ClioRequest::default_instance();
}
inline ::ClioApi::ClioRequest* ClioApi::mutable_request() {
  if (!has_request()) {
    clear_clio_api();
    set_has_request();
    clio_api_.request_ = new ::ClioApi::ClioRequest;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.request)
  return clio_api_.request_;
}
inline ::ClioApi::ClioRequest* ClioApi::release_request() {
  if (has_request()) {
    clear_has_clio_api();
    ::ClioApi::ClioRequest* temp = clio_api_.request_;
    clio_api_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClioApi::set_allocated_request(::ClioApi::ClioRequest* request) {
  clear_clio_api();
  if (request) {
    set_has_request();
    clio_api_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.request)
}

// optional .ClioApi.ClioResponse response = 3;
inline bool ClioApi::has_response() const {
  return clio_api_case() == kResponse;
}
inline void ClioApi::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void ClioApi::clear_response() {
  if (has_response()) {
    delete clio_api_.response_;
    clear_has_clio_api();
  }
}
inline const ::ClioApi::ClioResponse& ClioApi::response() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.response)
  return has_response() ? *clio_api_.response_
                      : ::ClioApi::ClioResponse::default_instance();
}
inline ::ClioApi::ClioResponse* ClioApi::mutable_response() {
  if (!has_response()) {
    clear_clio_api();
    set_has_response();
    clio_api_.response_ = new ::ClioApi::ClioResponse;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.response)
  return clio_api_.response_;
}
inline ::ClioApi::ClioResponse* ClioApi::release_response() {
  if (has_response()) {
    clear_has_clio_api();
    ::ClioApi::ClioResponse* temp = clio_api_.response_;
    clio_api_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClioApi::set_allocated_response(::ClioApi::ClioResponse* response) {
  clear_clio_api();
  if (response) {
    set_has_response();
    clio_api_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.response)
}

inline bool ClioApi::has_clio_api() const {
  return clio_api_case() != CLIO_API_NOT_SET;
}
inline void ClioApi::clear_has_clio_api() {
  _oneof_case_[0] = CLIO_API_NOT_SET;
}
inline ClioApi::ClioApiCase ClioApi::clio_api_case() const {
  return ClioApi::ClioApiCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClioServerStatus

// optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
inline void ClioServerStatus::clear_status() {
  status_ = 0;
}
inline ::ClioApi::ClioServerStatus_E_STATUS ClioServerStatus::status() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioServerStatus.status)
  return static_cast< ::ClioApi::ClioServerStatus_E_STATUS >(status_);
}
inline void ClioServerStatus::set_status(::ClioApi::ClioServerStatus_E_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioServerStatus.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioApi

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClioApi::ClioServerStatus_E_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClioApi::ClioServerStatus_E_STATUS>() {
  return ::ClioApi::ClioServerStatus_E_STATUS_descriptor();
}
template <> struct is_proto_enum< ::ClioApi::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClioApi::MessageType>() {
  return ::ClioApi::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clio_5fapi_2eproto__INCLUDED
