/**
 * Clio API between Clio Agent and Clio Server
 */

syntax="proto3";
package ClioApi;

option java_package = "com.cisco.clio.api";
option java_outer_classname = "ClioApi";
option optimize_for = SPEED;

/// Clio server status
enum E_SERVER_STATUS {
	UP = 0;
	DOWN = 1;
	SUSPEND = 2;
}

/// phony message
message Empty {
}

/// Common header of clio messages
message ClioMsgHeader {
	string msg_name       = 1;  /// the name of the message, e.g. StartRecording, it is descriptive
	string proc_name      = 2;  /// the name of the process, e.g. ClioAgent or ClioServer
	string from           = 3;  /// the human readable and meaningful string of the sender, typically we can use the url of the component, e.g. <proto://10.100.13.157:2222;transport=tcp>
	string to             = 4;  /// the human readable and meaningful string of the receiver
	int32  timestamp      = 5;  /// the time message was generated
	string transaction_id = 6;  /// unique transaction identifier
	int32  seq            = 7;  /// incremental sequence number within one transaction, the retransmitted message must use the same seq
	bytes  check_sum      = 8;  /// check sum of message body to ensure the data integrity
}

/// Request
message A2C_ShutdownRequest {   /// Agent to server, shutdown
	ClioMsgHeader header  = 100;  /// common header
	int32  after          = 200; /// take action after a while, default 0
	string reason         = 201;  /// the reason of the request, optional
}

message A2C_SuspendRequest {   /// Agent to server, shutdown
	ClioMsgHeader header  = 100;  /// common header
	int32  after          = 200; /// take action after a while, default 0
	string reason         = 201;  /// the reason of the request, optional
}

message A2C_ResumeRequest {   /// Agent to server, shutdown
	ClioMsgHeader header  = 100;  /// common header
	int32  after          = 200; /// take action after a while, default 0
	string reason         = 201;  /// the reason of the request, optional
}

/// Response
message C2A_ShutdownResponse {   /// Server to agent, shutdown result
	ClioMsgHeader header  = 100;  /// common header
	int32  response_code  = 200;  /// response code, default 200 OK
	string description    = 201; /// description of the result, optional
	E_SERVER_STATUS server_status = 6;  /// current status, optional, the final status will be sent in the C2A_Status notification
}

message C2A_SuspendResponse {   /// Server to agent, shutdown result
	ClioMsgHeader header  = 100;  /// common header
	int32  response_code  = 200;  /// response code, default 200 OK
	string description    = 201; /// description of the result, optional
	E_SERVER_STATUS server_status = 6;  /// current status, optional, the final status will be sent in the C2A_Status notification
}

message C2A_ResumeResponse {   /// Server to agent, shutdown result
	ClioMsgHeader header  = 100;  /// common header
	int32  response_code  = 200;  /// response code, default 200 OK
	string description    = 201; /// description of the result, optional
	E_SERVER_STATUS server_status = 6;  /// current status, optional, the final status will be sent in the C2A_Status notification
}

/// server status notification
message C2A_Status {
	ClioMsgHeader header  = 1;  /// common header
	E_SERVER_STATUS server_status = 2;
}

/// Clio Agent Service
service ClioAgent {
	rpc ServerStatusUpdate(C2A_Status) returns (Empty);
}

/// Clio Server Service
service ClioServer {
	rpc Shutdown(A2C_ShutdownRequest) returns (C2A_ShutdownResponse);
	rpc Suspend(A2C_SuspendRequest) returns (C2A_SuspendResponse);
	rpc Resume(A2C_ResumeRequest) returns (C2A_ResumeResponse);
}
