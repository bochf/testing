// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clio_api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clio_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClioApi {

namespace {

const ::google::protobuf::Descriptor* ClioMsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioMsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClioNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClioRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClioResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClioApi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioApi_reflection_ = NULL;
struct ClioApiOneofInstance {
  const ::ClioApi::ClioNotify* notify_;
  const ::ClioApi::ClioRequest* request_;
  const ::ClioApi::ClioResponse* response_;
}* ClioApi_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ClioServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioServerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClioServerStatus_E_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ClioAgent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_clio_5fapi_2eproto() {
  protobuf_AddDesc_clio_5fapi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "clio_api.proto");
  GOOGLE_CHECK(file != NULL);
  ClioMsgHeader_descriptor_ = file->message_type(0);
  static const int ClioMsgHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, proc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, check_sum_),
  };
  ClioMsgHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioMsgHeader_descriptor_,
      ClioMsgHeader::default_instance_,
      ClioMsgHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClioMsgHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioMsgHeader, _is_default_instance_));
  ClioNotify_descriptor_ = file->message_type(1);
  static const int ClioNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioNotify, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioNotify, body_),
  };
  ClioNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioNotify_descriptor_,
      ClioNotify::default_instance_,
      ClioNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClioNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioNotify, _is_default_instance_));
  ClioRequest_descriptor_ = file->message_type(2);
  static const int ClioRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, body_),
  };
  ClioRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioRequest_descriptor_,
      ClioRequest::default_instance_,
      ClioRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClioRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioRequest, _is_default_instance_));
  ClioResponse_descriptor_ = file->message_type(3);
  static const int ClioResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, body_),
  };
  ClioResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioResponse_descriptor_,
      ClioResponse::default_instance_,
      ClioResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClioResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioResponse, _is_default_instance_));
  ClioApi_descriptor_ = file->message_type(4);
  static const int ClioApi_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClioApi_default_oneof_instance_, notify_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClioApi_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClioApi_default_oneof_instance_, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioApi, clio_api_),
  };
  ClioApi_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioApi_descriptor_,
      ClioApi::default_instance_,
      ClioApi_offsets_,
      -1,
      -1,
      -1,
      ClioApi_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioApi, _oneof_case_[0]),
      sizeof(ClioApi),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioApi, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioApi, _is_default_instance_));
  ClioServerStatus_descriptor_ = file->message_type(5);
  static const int ClioServerStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioServerStatus, status_),
  };
  ClioServerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioServerStatus_descriptor_,
      ClioServerStatus::default_instance_,
      ClioServerStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClioServerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioServerStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioServerStatus, _is_default_instance_));
  ClioServerStatus_E_STATUS_descriptor_ = ClioServerStatus_descriptor_->enum_type(0);
  MessageType_descriptor_ = file->enum_type(0);
  ClioAgent_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_clio_5fapi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioMsgHeader_descriptor_, &ClioMsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioNotify_descriptor_, &ClioNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioRequest_descriptor_, &ClioRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioResponse_descriptor_, &ClioResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioApi_descriptor_, &ClioApi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioServerStatus_descriptor_, &ClioServerStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_clio_5fapi_2eproto() {
  delete ClioMsgHeader::default_instance_;
  delete ClioMsgHeader_reflection_;
  delete ClioNotify::default_instance_;
  delete ClioNotify_reflection_;
  delete ClioRequest::default_instance_;
  delete ClioRequest_reflection_;
  delete ClioResponse::default_instance_;
  delete ClioResponse_reflection_;
  delete ClioApi::default_instance_;
  delete ClioApi_default_oneof_instance_;
  delete ClioApi_reflection_;
  delete ClioServerStatus::default_instance_;
  delete ClioServerStatus_reflection_;
}

void protobuf_AddDesc_clio_5fapi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016clio_api.proto\022\007ClioApi\"t\n\rClioMsgHead"
    "er\022\020\n\010msg_name\030\001 \001(\t\022\021\n\tproc_name\030\002 \001(\t\022"
    "\014\n\004from\030\003 \001(\t\022\n\n\002to\030\004 \001(\t\022\021\n\ttimestamp\030\005"
    " \001(\005\022\021\n\tcheck_sum\030\006 \001(\014\"B\n\nClioNotify\022&\n"
    "\006header\030\001 \001(\0132\026.ClioApi.ClioMsgHeader\022\014\n"
    "\004body\030\002 \001(\014\"\217\001\n\013ClioRequest\022&\n\006header\030\001 "
    "\001(\0132\026.ClioApi.ClioMsgHeader\022\026\n\016transacti"
    "on_id\030\002 \001(\t\022\013\n\003seq\030\003 \001(\005\022\017\n\007contact\030\004 \001("
    "\t\022\024\n\014request_type\030\005 \001(\005\022\014\n\004body\030\006 \001(\014\"i\n"
    "\014ClioResponse\022&\n\006header\030\001 \001(\0132\026.ClioApi."
    "ClioMsgHeader\022\026\n\016transaction_id\030\002 \001(\t\022\013\n"
    "\003seq\030\003 \001(\005\022\014\n\004body\030\004 \001(\014\"\220\001\n\007ClioApi\022%\n\006"
    "notify\030\001 \001(\0132\023.ClioApi.ClioNotifyH\000\022\'\n\007r"
    "equest\030\002 \001(\0132\024.ClioApi.ClioRequestH\000\022)\n\010"
    "response\030\003 \001(\0132\025.ClioApi.ClioResponseH\000B"
    "\n\n\010clio_api\"q\n\020ClioServerStatus\0222\n\006statu"
    "s\030\001 \001(\0162\".ClioApi.ClioServerStatus.E_STA"
    "TUS\")\n\010E_STATUS\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\013\n\007SUS"
    "PEND\020\002*\272\001\n\013MessageType\022\025\n\021A2C_REQ_RECORD"
    "ING\020\000\022\027\n\023A2C_START_RECORDING\020\001\022\026\n\022A2C_ST"
    "OP_RECORDING\020\002\022\020\n\nC2A_NOTIFY\020\240\234\001\022\027\n\021C2A_"
    "SERVER_STATUS\020\241\234\001\022\027\n\021C2A_RSP_RECORDING\020\260"
    "\352\001\022\037\n\031C2A_RSP_RECORDING_STARTED\020\261\352\0012}\n\tC"
    "lioAgent\0226\n\010OnNotify\022\023.ClioApi.ClioNotif"
    "y\032\025.ClioApi.ClioResponse\0228\n\tOnRequest\022\024."
    "ClioApi.ClioRequest\032\025.ClioApi.ClioRespon"
    "seB\"\n\022com.cisco.clio.apiB\007ClioApiH\001\200\001\001b\006"
    "proto3", 1086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clio_api.proto", &protobuf_RegisterTypes);
  ClioMsgHeader::default_instance_ = new ClioMsgHeader();
  ClioNotify::default_instance_ = new ClioNotify();
  ClioRequest::default_instance_ = new ClioRequest();
  ClioResponse::default_instance_ = new ClioResponse();
  ClioApi::default_instance_ = new ClioApi();
  ClioApi_default_oneof_instance_ = new ClioApiOneofInstance();
  ClioServerStatus::default_instance_ = new ClioServerStatus();
  ClioMsgHeader::default_instance_->InitAsDefaultInstance();
  ClioNotify::default_instance_->InitAsDefaultInstance();
  ClioRequest::default_instance_->InitAsDefaultInstance();
  ClioResponse::default_instance_->InitAsDefaultInstance();
  ClioApi::default_instance_->InitAsDefaultInstance();
  ClioServerStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_clio_5fapi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_clio_5fapi_2eproto {
  StaticDescriptorInitializer_clio_5fapi_2eproto() {
    protobuf_AddDesc_clio_5fapi_2eproto();
  }
} static_descriptor_initializer_clio_5fapi_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 20000:
    case 20001:
    case 30000:
    case 30001:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ClioMsgHeader::kMsgNameFieldNumber;
const int ClioMsgHeader::kProcNameFieldNumber;
const int ClioMsgHeader::kFromFieldNumber;
const int ClioMsgHeader::kToFieldNumber;
const int ClioMsgHeader::kTimestampFieldNumber;
const int ClioMsgHeader::kCheckSumFieldNumber;
#endif  // !_MSC_VER

ClioMsgHeader::ClioMsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioMsgHeader)
}

void ClioMsgHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClioMsgHeader::ClioMsgHeader(const ClioMsgHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioMsgHeader)
}

void ClioMsgHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  check_sum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClioMsgHeader::~ClioMsgHeader() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioMsgHeader)
  SharedDtor();
}

void ClioMsgHeader::SharedDtor() {
  msg_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  check_sum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClioMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioMsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioMsgHeader_descriptor_;
}

const ClioMsgHeader& ClioMsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioMsgHeader* ClioMsgHeader::default_instance_ = NULL;

ClioMsgHeader* ClioMsgHeader::New(::google::protobuf::Arena* arena) const {
  ClioMsgHeader* n = new ClioMsgHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioMsgHeader::Clear() {
  msg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  check_sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClioMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioMsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioMsgHeader.msg_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proc_name;
        break;
      }

      // optional string proc_name = 2;
      case 2: {
        if (tag == 18) {
         parse_proc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc_name().data(), this->proc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioMsgHeader.proc_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // optional string from = 3;
      case 3: {
        if (tag == 26) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioMsgHeader.from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // optional string to = 4;
      case 4: {
        if (tag == 34) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioMsgHeader.to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_check_sum;
        break;
      }

      // optional bytes check_sum = 6;
      case 6: {
        if (tag == 50) {
         parse_check_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_check_sum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioMsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioMsgHeader)
  return false;
#undef DO_
}

void ClioMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioMsgHeader)
  // optional string msg_name = 1;
  if (this->msg_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.msg_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_name(), output);
  }

  // optional string proc_name = 2;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.proc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proc_name(), output);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // optional int32 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timestamp(), output);
  }

  // optional bytes check_sum = 6;
  if (this->check_sum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->check_sum(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioMsgHeader)
}

::google::protobuf::uint8* ClioMsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioMsgHeader)
  // optional string msg_name = 1;
  if (this->msg_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.msg_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_name(), target);
  }

  // optional string proc_name = 2;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.proc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proc_name(), target);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioMsgHeader.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional int32 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timestamp(), target);
  }

  // optional bytes check_sum = 6;
  if (this->check_sum().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->check_sum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioMsgHeader)
  return target;
}

int ClioMsgHeader::ByteSize() const {
  int total_size = 0;

  // optional string msg_name = 1;
  if (this->msg_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_name());
  }

  // optional string proc_name = 2;
  if (this->proc_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_name());
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional int32 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  // optional bytes check_sum = 6;
  if (this->check_sum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->check_sum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioMsgHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioMsgHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioMsgHeader::MergeFrom(const ClioMsgHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg_name().size() > 0) {

    msg_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_name_);
  }
  if (from.proc_name().size() > 0) {

    proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.check_sum().size() > 0) {

    check_sum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.check_sum_);
  }
}

void ClioMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioMsgHeader::CopyFrom(const ClioMsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioMsgHeader::IsInitialized() const {

  return true;
}

void ClioMsgHeader::Swap(ClioMsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioMsgHeader::InternalSwap(ClioMsgHeader* other) {
  msg_name_.Swap(&other->msg_name_);
  proc_name_.Swap(&other->proc_name_);
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  std::swap(timestamp_, other->timestamp_);
  check_sum_.Swap(&other->check_sum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioMsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioMsgHeader_descriptor_;
  metadata.reflection = ClioMsgHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioMsgHeader

// optional string msg_name = 1;
void ClioMsgHeader::clear_msg_name() {
  msg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioMsgHeader::msg_name() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.msg_name)
  return msg_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_msg_name(const ::std::string& value) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.msg_name)
}
 void ClioMsgHeader::set_msg_name(const char* value) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.msg_name)
}
 void ClioMsgHeader::set_msg_name(const char* value, size_t size) {
  
  msg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.msg_name)
}
 ::std::string* ClioMsgHeader::mutable_msg_name() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.msg_name)
  return msg_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioMsgHeader::release_msg_name() {
  
  return msg_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_allocated_msg_name(::std::string* msg_name) {
  if (msg_name != NULL) {
    
  } else {
    
  }
  msg_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_name);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.msg_name)
}

// optional string proc_name = 2;
void ClioMsgHeader::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioMsgHeader::proc_name() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.proc_name)
  return proc_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_proc_name(const ::std::string& value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.proc_name)
}
 void ClioMsgHeader::set_proc_name(const char* value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.proc_name)
}
 void ClioMsgHeader::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.proc_name)
}
 ::std::string* ClioMsgHeader::mutable_proc_name() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioMsgHeader::release_proc_name() {
  
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.proc_name)
}

// optional string from = 3;
void ClioMsgHeader::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioMsgHeader::from() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.from)
}
 void ClioMsgHeader::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.from)
}
 void ClioMsgHeader::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.from)
}
 ::std::string* ClioMsgHeader::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioMsgHeader::release_from() {
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.from)
}

// optional string to = 4;
void ClioMsgHeader::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioMsgHeader::to() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.to)
}
 void ClioMsgHeader::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.to)
}
 void ClioMsgHeader::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.to)
}
 ::std::string* ClioMsgHeader::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioMsgHeader::release_to() {
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.to)
}

// optional int32 timestamp = 5;
void ClioMsgHeader::clear_timestamp() {
  timestamp_ = 0;
}
 ::google::protobuf::int32 ClioMsgHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.timestamp)
  return timestamp_;
}
 void ClioMsgHeader::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.timestamp)
}

// optional bytes check_sum = 6;
void ClioMsgHeader::clear_check_sum() {
  check_sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioMsgHeader::check_sum() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioMsgHeader.check_sum)
  return check_sum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_check_sum(const ::std::string& value) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioMsgHeader.check_sum)
}
 void ClioMsgHeader::set_check_sum(const char* value) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioMsgHeader.check_sum)
}
 void ClioMsgHeader::set_check_sum(const void* value, size_t size) {
  
  check_sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioMsgHeader.check_sum)
}
 ::std::string* ClioMsgHeader::mutable_check_sum() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioMsgHeader.check_sum)
  return check_sum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioMsgHeader::release_check_sum() {
  
  return check_sum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioMsgHeader::set_allocated_check_sum(::std::string* check_sum) {
  if (check_sum != NULL) {
    
  } else {
    
  }
  check_sum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), check_sum);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioMsgHeader.check_sum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClioNotify::kHeaderFieldNumber;
const int ClioNotify::kBodyFieldNumber;
#endif  // !_MSC_VER

ClioNotify::ClioNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioNotify)
}

void ClioNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::ClioApi::ClioMsgHeader*>(&::ClioApi::ClioMsgHeader::default_instance());
}

ClioNotify::ClioNotify(const ClioNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioNotify)
}

void ClioNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClioNotify::~ClioNotify() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioNotify)
  SharedDtor();
}

void ClioNotify::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void ClioNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioNotify_descriptor_;
}

const ClioNotify& ClioNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioNotify* ClioNotify::default_instance_ = NULL;

ClioNotify* ClioNotify::New(::google::protobuf::Arena* arena) const {
  ClioNotify* n = new ClioNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioNotify::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClioNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClioApi.ClioMsgHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioNotify)
  return false;
#undef DO_
}

void ClioNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioNotify)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioNotify)
}

::google::protobuf::uint8* ClioNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioNotify)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioNotify)
  return target;
}

int ClioNotify::ByteSize() const {
  int total_size = 0;

  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioNotify>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioNotify::MergeFrom(const ClioNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::ClioApi::ClioMsgHeader::MergeFrom(from.header());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void ClioNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioNotify::CopyFrom(const ClioNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioNotify::IsInitialized() const {

  return true;
}

void ClioNotify::Swap(ClioNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioNotify::InternalSwap(ClioNotify* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioNotify_descriptor_;
  metadata.reflection = ClioNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioNotify

// optional .ClioApi.ClioMsgHeader header = 1;
bool ClioNotify::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ClioNotify::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
 const ::ClioApi::ClioMsgHeader& ClioNotify::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioNotify.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
 ::ClioApi::ClioMsgHeader* ClioNotify::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioNotify.header)
  return header_;
}
 ::ClioApi::ClioMsgHeader* ClioNotify::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
 void ClioNotify::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioNotify.header)
}

// optional bytes body = 2;
void ClioNotify::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioNotify::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioNotify.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioNotify::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioNotify.body)
}
 void ClioNotify::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioNotify.body)
}
 void ClioNotify::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioNotify.body)
}
 ::std::string* ClioNotify::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioNotify.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioNotify::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioNotify::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioNotify.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClioRequest::kHeaderFieldNumber;
const int ClioRequest::kTransactionIdFieldNumber;
const int ClioRequest::kSeqFieldNumber;
const int ClioRequest::kContactFieldNumber;
const int ClioRequest::kRequestTypeFieldNumber;
const int ClioRequest::kBodyFieldNumber;
#endif  // !_MSC_VER

ClioRequest::ClioRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioRequest)
}

void ClioRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::ClioApi::ClioMsgHeader*>(&::ClioApi::ClioMsgHeader::default_instance());
}

ClioRequest::ClioRequest(const ClioRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioRequest)
}

void ClioRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
  contact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClioRequest::~ClioRequest() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioRequest)
  SharedDtor();
}

void ClioRequest::SharedDtor() {
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void ClioRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioRequest_descriptor_;
}

const ClioRequest& ClioRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioRequest* ClioRequest::default_instance_ = NULL;

ClioRequest* ClioRequest::New(::google::protobuf::Arena* arena) const {
  ClioRequest* n = new ClioRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClioRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seq_, request_type_);
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ClioRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClioApi.ClioMsgHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transaction_id;
        break;
      }

      // optional string transaction_id = 2;
      case 2: {
        if (tag == 18) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioRequest.transaction_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contact;
        break;
      }

      // optional string contact = 4;
      case 4: {
        if (tag == 34) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioRequest.contact");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 5;
      case 5: {
        if (tag == 40) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body;
        break;
      }

      // optional bytes body = 6;
      case 6: {
        if (tag == 50) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioRequest)
  return false;
#undef DO_
}

void ClioRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioRequest)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioRequest.transaction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transaction_id(), output);
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  // optional string contact = 4;
  if (this->contact().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioRequest.contact");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contact(), output);
  }

  // optional int32 request_type = 5;
  if (this->request_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_type(), output);
  }

  // optional bytes body = 6;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioRequest)
}

::google::protobuf::uint8* ClioRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioRequest)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioRequest.transaction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transaction_id(), target);
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  // optional string contact = 4;
  if (this->contact().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioRequest.contact");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contact(), target);
  }

  // optional int32 request_type = 5;
  if (this->request_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_type(), target);
  }

  // optional bytes body = 6;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioRequest)
  return target;
}

int ClioRequest::ByteSize() const {
  int total_size = 0;

  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transaction_id());
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  // optional string contact = 4;
  if (this->contact().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contact());
  }

  // optional int32 request_type = 5;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_type());
  }

  // optional bytes body = 6;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioRequest::MergeFrom(const ClioRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::ClioApi::ClioMsgHeader::MergeFrom(from.header());
  }
  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.contact().size() > 0) {

    contact_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_);
  }
  if (from.request_type() != 0) {
    set_request_type(from.request_type());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void ClioRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioRequest::CopyFrom(const ClioRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioRequest::IsInitialized() const {

  return true;
}

void ClioRequest::Swap(ClioRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioRequest::InternalSwap(ClioRequest* other) {
  std::swap(header_, other->header_);
  transaction_id_.Swap(&other->transaction_id_);
  std::swap(seq_, other->seq_);
  contact_.Swap(&other->contact_);
  std::swap(request_type_, other->request_type_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioRequest_descriptor_;
  metadata.reflection = ClioRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioRequest

// optional .ClioApi.ClioMsgHeader header = 1;
bool ClioRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ClioRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
 const ::ClioApi::ClioMsgHeader& ClioRequest::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
 ::ClioApi::ClioMsgHeader* ClioRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.header)
  return header_;
}
 ::ClioApi::ClioMsgHeader* ClioRequest::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
 void ClioRequest::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.header)
}

// optional string transaction_id = 2;
void ClioRequest::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_transaction_id(const ::std::string& value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.transaction_id)
}
 void ClioRequest::set_transaction_id(const char* value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.transaction_id)
}
 void ClioRequest::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.transaction_id)
}
 ::std::string* ClioRequest::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioRequest::release_transaction_id() {
  
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.transaction_id)
}

// optional int32 seq = 3;
void ClioRequest::clear_seq() {
  seq_ = 0;
}
 ::google::protobuf::int32 ClioRequest::seq() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.seq)
  return seq_;
}
 void ClioRequest::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.seq)
}

// optional string contact = 4;
void ClioRequest::clear_contact() {
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioRequest::contact() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.contact)
  return contact_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_contact(const ::std::string& value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.contact)
}
 void ClioRequest::set_contact(const char* value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.contact)
}
 void ClioRequest::set_contact(const char* value, size_t size) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.contact)
}
 ::std::string* ClioRequest::mutable_contact() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.contact)
  return contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioRequest::release_contact() {
  
  return contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_allocated_contact(::std::string* contact) {
  if (contact != NULL) {
    
  } else {
    
  }
  contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.contact)
}

// optional int32 request_type = 5;
void ClioRequest::clear_request_type() {
  request_type_ = 0;
}
 ::google::protobuf::int32 ClioRequest::request_type() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.request_type)
  return request_type_;
}
 void ClioRequest::set_request_type(::google::protobuf::int32 value) {
  
  request_type_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.request_type)
}

// optional bytes body = 6;
void ClioRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioRequest::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioRequest.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioRequest.body)
}
 void ClioRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioRequest.body)
}
 void ClioRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioRequest.body)
}
 ::std::string* ClioRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioRequest::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioRequest.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClioResponse::kHeaderFieldNumber;
const int ClioResponse::kTransactionIdFieldNumber;
const int ClioResponse::kSeqFieldNumber;
const int ClioResponse::kBodyFieldNumber;
#endif  // !_MSC_VER

ClioResponse::ClioResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioResponse)
}

void ClioResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::ClioApi::ClioMsgHeader*>(&::ClioApi::ClioMsgHeader::default_instance());
}

ClioResponse::ClioResponse(const ClioResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioResponse)
}

void ClioResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClioResponse::~ClioResponse() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioResponse)
  SharedDtor();
}

void ClioResponse::SharedDtor() {
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void ClioResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioResponse_descriptor_;
}

const ClioResponse& ClioResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioResponse* ClioResponse::default_instance_ = NULL;

ClioResponse* ClioResponse::New(::google::protobuf::Arena* arena) const {
  ClioResponse* n = new ClioResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClioResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClioApi.ClioMsgHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transaction_id;
        break;
      }

      // optional string transaction_id = 2;
      case 2: {
        if (tag == 18) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioApi.ClioResponse.transaction_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioResponse)
  return false;
#undef DO_
}

void ClioResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioResponse)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioResponse.transaction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transaction_id(), output);
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioResponse)
}

::google::protobuf::uint8* ClioResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioResponse)
  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioApi.ClioResponse.transaction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transaction_id(), target);
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioResponse)
  return target;
}

int ClioResponse::ByteSize() const {
  int total_size = 0;

  // optional .ClioApi.ClioMsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transaction_id());
  }

  // optional int32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioResponse::MergeFrom(const ClioResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::ClioApi::ClioMsgHeader::MergeFrom(from.header());
  }
  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void ClioResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioResponse::CopyFrom(const ClioResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioResponse::IsInitialized() const {

  return true;
}

void ClioResponse::Swap(ClioResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioResponse::InternalSwap(ClioResponse* other) {
  std::swap(header_, other->header_);
  transaction_id_.Swap(&other->transaction_id_);
  std::swap(seq_, other->seq_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioResponse_descriptor_;
  metadata.reflection = ClioResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioResponse

// optional .ClioApi.ClioMsgHeader header = 1;
bool ClioResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ClioResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
 const ::ClioApi::ClioMsgHeader& ClioResponse::header() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
 ::ClioApi::ClioMsgHeader* ClioResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::ClioApi::ClioMsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.header)
  return header_;
}
 ::ClioApi::ClioMsgHeader* ClioResponse::release_header() {
  
  ::ClioApi::ClioMsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
 void ClioResponse::set_allocated_header(::ClioApi::ClioMsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.header)
}

// optional string transaction_id = 2;
void ClioResponse::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioResponse::set_transaction_id(const ::std::string& value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.transaction_id)
}
 void ClioResponse::set_transaction_id(const char* value) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioResponse.transaction_id)
}
 void ClioResponse::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioResponse.transaction_id)
}
 ::std::string* ClioResponse::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioResponse::release_transaction_id() {
  
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioResponse::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.transaction_id)
}

// optional int32 seq = 3;
void ClioResponse::clear_seq() {
  seq_ = 0;
}
 ::google::protobuf::int32 ClioResponse::seq() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.seq)
  return seq_;
}
 void ClioResponse::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.seq)
}

// optional bytes body = 4;
void ClioResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClioResponse::body() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioResponse.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioApi.ClioResponse.body)
}
 void ClioResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioApi.ClioResponse.body)
}
 void ClioResponse::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioApi.ClioResponse.body)
}
 ::std::string* ClioResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioResponse::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioResponse.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClioApi::kNotifyFieldNumber;
const int ClioApi::kRequestFieldNumber;
const int ClioApi::kResponseFieldNumber;
#endif  // !_MSC_VER

ClioApi::ClioApi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioApi)
}

void ClioApi::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ClioApi_default_oneof_instance_->notify_ = const_cast< ::ClioApi::ClioNotify*>(&::ClioApi::ClioNotify::default_instance());
  ClioApi_default_oneof_instance_->request_ = const_cast< ::ClioApi::ClioRequest*>(&::ClioApi::ClioRequest::default_instance());
  ClioApi_default_oneof_instance_->response_ = const_cast< ::ClioApi::ClioResponse*>(&::ClioApi::ClioResponse::default_instance());
}

ClioApi::ClioApi(const ClioApi& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioApi)
}

void ClioApi::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_clio_api();
}

ClioApi::~ClioApi() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioApi)
  SharedDtor();
}

void ClioApi::SharedDtor() {
  if (has_clio_api()) {
    clear_clio_api();
  }
  if (this != default_instance_) {
  }
}

void ClioApi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioApi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioApi_descriptor_;
}

const ClioApi& ClioApi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioApi* ClioApi::default_instance_ = NULL;

ClioApi* ClioApi::New(::google::protobuf::Arena* arena) const {
  ClioApi* n = new ClioApi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioApi::clear_clio_api() {
  switch(clio_api_case()) {
    case kNotify: {
      delete clio_api_.notify_;
      break;
    }
    case kRequest: {
      delete clio_api_.request_;
      break;
    }
    case kResponse: {
      delete clio_api_.response_;
      break;
    }
    case CLIO_API_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIO_API_NOT_SET;
}


void ClioApi::Clear() {
  clear_clio_api();
}

bool ClioApi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioApi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClioApi.ClioNotify notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .ClioApi.ClioRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional .ClioApi.ClioResponse response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioApi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioApi)
  return false;
#undef DO_
}

void ClioApi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioApi)
  // optional .ClioApi.ClioNotify notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *clio_api_.notify_, output);
  }

  // optional .ClioApi.ClioRequest request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *clio_api_.request_, output);
  }

  // optional .ClioApi.ClioResponse response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *clio_api_.response_, output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioApi)
}

::google::protobuf::uint8* ClioApi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioApi)
  // optional .ClioApi.ClioNotify notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *clio_api_.notify_, target);
  }

  // optional .ClioApi.ClioRequest request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *clio_api_.request_, target);
  }

  // optional .ClioApi.ClioResponse response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *clio_api_.response_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioApi)
  return target;
}

int ClioApi::ByteSize() const {
  int total_size = 0;

  switch (clio_api_case()) {
    // optional .ClioApi.ClioNotify notify = 1;
    case kNotify: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *clio_api_.notify_);
      break;
    }
    // optional .ClioApi.ClioRequest request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *clio_api_.request_);
      break;
    }
    // optional .ClioApi.ClioResponse response = 3;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *clio_api_.response_);
      break;
    }
    case CLIO_API_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioApi::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioApi* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioApi>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioApi::MergeFrom(const ClioApi& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.clio_api_case()) {
    case kNotify: {
      mutable_notify()->::ClioApi::ClioNotify::MergeFrom(from.notify());
      break;
    }
    case kRequest: {
      mutable_request()->::ClioApi::ClioRequest::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::ClioApi::ClioResponse::MergeFrom(from.response());
      break;
    }
    case CLIO_API_NOT_SET: {
      break;
    }
  }
}

void ClioApi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioApi::CopyFrom(const ClioApi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioApi::IsInitialized() const {

  return true;
}

void ClioApi::Swap(ClioApi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioApi::InternalSwap(ClioApi* other) {
  std::swap(clio_api_, other->clio_api_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioApi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioApi_descriptor_;
  metadata.reflection = ClioApi_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioApi

// optional .ClioApi.ClioNotify notify = 1;
bool ClioApi::has_notify() const {
  return clio_api_case() == kNotify;
}
void ClioApi::set_has_notify() {
  _oneof_case_[0] = kNotify;
}
void ClioApi::clear_notify() {
  if (has_notify()) {
    delete clio_api_.notify_;
    clear_has_clio_api();
  }
}
 const ::ClioApi::ClioNotify& ClioApi::notify() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.notify)
  return has_notify() ? *clio_api_.notify_
                      : ::ClioApi::ClioNotify::default_instance();
}
 ::ClioApi::ClioNotify* ClioApi::mutable_notify() {
  if (!has_notify()) {
    clear_clio_api();
    set_has_notify();
    clio_api_.notify_ = new ::ClioApi::ClioNotify;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.notify)
  return clio_api_.notify_;
}
 ::ClioApi::ClioNotify* ClioApi::release_notify() {
  if (has_notify()) {
    clear_has_clio_api();
    ::ClioApi::ClioNotify* temp = clio_api_.notify_;
    clio_api_.notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ClioApi::set_allocated_notify(::ClioApi::ClioNotify* notify) {
  clear_clio_api();
  if (notify) {
    set_has_notify();
    clio_api_.notify_ = notify;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.notify)
}

// optional .ClioApi.ClioRequest request = 2;
bool ClioApi::has_request() const {
  return clio_api_case() == kRequest;
}
void ClioApi::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void ClioApi::clear_request() {
  if (has_request()) {
    delete clio_api_.request_;
    clear_has_clio_api();
  }
}
 const ::ClioApi::ClioRequest& ClioApi::request() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.request)
  return has_request() ? *clio_api_.request_
                      : ::ClioApi::ClioRequest::default_instance();
}
 ::ClioApi::ClioRequest* ClioApi::mutable_request() {
  if (!has_request()) {
    clear_clio_api();
    set_has_request();
    clio_api_.request_ = new ::ClioApi::ClioRequest;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.request)
  return clio_api_.request_;
}
 ::ClioApi::ClioRequest* ClioApi::release_request() {
  if (has_request()) {
    clear_has_clio_api();
    ::ClioApi::ClioRequest* temp = clio_api_.request_;
    clio_api_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ClioApi::set_allocated_request(::ClioApi::ClioRequest* request) {
  clear_clio_api();
  if (request) {
    set_has_request();
    clio_api_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.request)
}

// optional .ClioApi.ClioResponse response = 3;
bool ClioApi::has_response() const {
  return clio_api_case() == kResponse;
}
void ClioApi::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void ClioApi::clear_response() {
  if (has_response()) {
    delete clio_api_.response_;
    clear_has_clio_api();
  }
}
 const ::ClioApi::ClioResponse& ClioApi::response() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioApi.response)
  return has_response() ? *clio_api_.response_
                      : ::ClioApi::ClioResponse::default_instance();
}
 ::ClioApi::ClioResponse* ClioApi::mutable_response() {
  if (!has_response()) {
    clear_clio_api();
    set_has_response();
    clio_api_.response_ = new ::ClioApi::ClioResponse;
  }
  // @@protoc_insertion_point(field_mutable:ClioApi.ClioApi.response)
  return clio_api_.response_;
}
 ::ClioApi::ClioResponse* ClioApi::release_response() {
  if (has_response()) {
    clear_has_clio_api();
    ::ClioApi::ClioResponse* temp = clio_api_.response_;
    clio_api_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ClioApi::set_allocated_response(::ClioApi::ClioResponse* response) {
  clear_clio_api();
  if (response) {
    set_has_response();
    clio_api_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:ClioApi.ClioApi.response)
}

bool ClioApi::has_clio_api() const {
  return clio_api_case() != CLIO_API_NOT_SET;
}
void ClioApi::clear_has_clio_api() {
  _oneof_case_[0] = CLIO_API_NOT_SET;
}
ClioApi::ClioApiCase ClioApi::clio_api_case() const {
  return ClioApi::ClioApiCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClioServerStatus_E_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioServerStatus_E_STATUS_descriptor_;
}
bool ClioServerStatus_E_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClioServerStatus_E_STATUS ClioServerStatus::UP;
const ClioServerStatus_E_STATUS ClioServerStatus::DOWN;
const ClioServerStatus_E_STATUS ClioServerStatus::SUSPEND;
const ClioServerStatus_E_STATUS ClioServerStatus::E_STATUS_MIN;
const ClioServerStatus_E_STATUS ClioServerStatus::E_STATUS_MAX;
const int ClioServerStatus::E_STATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClioServerStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

ClioServerStatus::ClioServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioApi.ClioServerStatus)
}

void ClioServerStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClioServerStatus::ClioServerStatus(const ClioServerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioApi.ClioServerStatus)
}

void ClioServerStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ClioServerStatus::~ClioServerStatus() {
  // @@protoc_insertion_point(destructor:ClioApi.ClioServerStatus)
  SharedDtor();
}

void ClioServerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClioServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioServerStatus_descriptor_;
}

const ClioServerStatus& ClioServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fapi_2eproto();
  return *default_instance_;
}

ClioServerStatus* ClioServerStatus::default_instance_ = NULL;

ClioServerStatus* ClioServerStatus::New(::google::protobuf::Arena* arena) const {
  ClioServerStatus* n = new ClioServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioServerStatus::Clear() {
  status_ = 0;
}

bool ClioServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioApi.ClioServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClioApi::ClioServerStatus_E_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioApi.ClioServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioApi.ClioServerStatus)
  return false;
#undef DO_
}

void ClioServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioApi.ClioServerStatus)
  // optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClioApi.ClioServerStatus)
}

::google::protobuf::uint8* ClioServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioApi.ClioServerStatus)
  // optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClioApi.ClioServerStatus)
  return target;
}

int ClioServerStatus::ByteSize() const {
  int total_size = 0;

  // optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioServerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioServerStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioServerStatus::MergeFrom(const ClioServerStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClioServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioServerStatus::CopyFrom(const ClioServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioServerStatus::IsInitialized() const {

  return true;
}

void ClioServerStatus::Swap(ClioServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioServerStatus::InternalSwap(ClioServerStatus* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioServerStatus_descriptor_;
  metadata.reflection = ClioServerStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioServerStatus

// optional .ClioApi.ClioServerStatus.E_STATUS status = 1;
void ClioServerStatus::clear_status() {
  status_ = 0;
}
 ::ClioApi::ClioServerStatus_E_STATUS ClioServerStatus::status() const {
  // @@protoc_insertion_point(field_get:ClioApi.ClioServerStatus.status)
  return static_cast< ::ClioApi::ClioServerStatus_E_STATUS >(status_);
}
 void ClioServerStatus::set_status(::ClioApi::ClioServerStatus_E_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClioApi.ClioServerStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ClioAgent::~ClioAgent() {}

const ::google::protobuf::ServiceDescriptor* ClioAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioAgent_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ClioAgent::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioAgent_descriptor_;
}

void ClioAgent::OnNotify(::google::protobuf::RpcController* controller,
                         const ::ClioApi::ClioNotify*,
                         ::ClioApi::ClioResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnNotify() not implemented.");
  done->Run();
}

void ClioAgent::OnRequest(::google::protobuf::RpcController* controller,
                         const ::ClioApi::ClioRequest*,
                         ::ClioApi::ClioResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnRequest() not implemented.");
  done->Run();
}

void ClioAgent::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ClioAgent_descriptor_);
  switch(method->index()) {
    case 0:
      OnNotify(controller,
             ::google::protobuf::down_cast<const ::ClioApi::ClioNotify*>(request),
             ::google::protobuf::down_cast< ::ClioApi::ClioResponse*>(response),
             done);
      break;
    case 1:
      OnRequest(controller,
             ::google::protobuf::down_cast<const ::ClioApi::ClioRequest*>(request),
             ::google::protobuf::down_cast< ::ClioApi::ClioResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ClioAgent::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ClioApi::ClioNotify::default_instance();
    case 1:
      return ::ClioApi::ClioRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ClioAgent::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ClioApi::ClioResponse::default_instance();
    case 1:
      return ::ClioApi::ClioResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

ClioAgent_Stub::ClioAgent_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ClioAgent_Stub::ClioAgent_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ClioAgent_Stub::~ClioAgent_Stub() {
  if (owns_channel_) delete channel_;
}

void ClioAgent_Stub::OnNotify(::google::protobuf::RpcController* controller,
                              const ::ClioApi::ClioNotify* request,
                              ::ClioApi::ClioResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ClioAgent_Stub::OnRequest(::google::protobuf::RpcController* controller,
                              const ::ClioApi::ClioRequest* request,
                              ::ClioApi::ClioResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioApi

// @@protoc_insertion_point(global_scope)
