// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clio_command.proto

#ifndef PROTOBUF_clio_5fcommand_2eproto__INCLUDED
#define PROTOBUF_clio_5fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ClioCommand {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_clio_5fcommand_2eproto();
void protobuf_AssignDesc_clio_5fcommand_2eproto();
void protobuf_ShutdownFile_clio_5fcommand_2eproto();

class CmdShutdown;
class CmdSuspend;
class CmdResume;
class ClioCommand;

// ===================================================================

class CmdShutdown : public ::google::protobuf::Message {
 public:
  CmdShutdown();
  virtual ~CmdShutdown();

  CmdShutdown(const CmdShutdown& from);

  inline CmdShutdown& operator=(const CmdShutdown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdShutdown& default_instance();

  void Swap(CmdShutdown* other);

  // implements Message ----------------------------------------------

  inline CmdShutdown* New() const { return New(NULL); }

  CmdShutdown* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdShutdown& from);
  void MergeFrom(const CmdShutdown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdShutdown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 after = 2;
  bool has_after() const;
  void clear_after();
  static const int kAfterFieldNumber = 2;
  ::google::protobuf::int32 after() const;
  void set_after(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClioCommand.CmdShutdown)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_after();
  inline void clear_has_after();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 after_;
  friend void  protobuf_AddDesc_clio_5fcommand_2eproto();
  friend void protobuf_AssignDesc_clio_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_clio_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static CmdShutdown* default_instance_;
};
// -------------------------------------------------------------------

class CmdSuspend : public ::google::protobuf::Message {
 public:
  CmdSuspend();
  virtual ~CmdSuspend();

  CmdSuspend(const CmdSuspend& from);

  inline CmdSuspend& operator=(const CmdSuspend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSuspend& default_instance();

  void Swap(CmdSuspend* other);

  // implements Message ----------------------------------------------

  inline CmdSuspend* New() const { return New(NULL); }

  CmdSuspend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSuspend& from);
  void MergeFrom(const CmdSuspend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdSuspend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 after = 2;
  bool has_after() const;
  void clear_after();
  static const int kAfterFieldNumber = 2;
  ::google::protobuf::int32 after() const;
  void set_after(::google::protobuf::int32 value);

  // required bool need_notify = 3;
  bool has_need_notify() const;
  void clear_need_notify();
  static const int kNeedNotifyFieldNumber = 3;
  bool need_notify() const;
  void set_need_notify(bool value);

  // @@protoc_insertion_point(class_scope:ClioCommand.CmdSuspend)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_need_notify();
  inline void clear_has_need_notify();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 after_;
  bool need_notify_;
  friend void  protobuf_AddDesc_clio_5fcommand_2eproto();
  friend void protobuf_AssignDesc_clio_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_clio_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static CmdSuspend* default_instance_;
};
// -------------------------------------------------------------------

class CmdResume : public ::google::protobuf::Message {
 public:
  CmdResume();
  virtual ~CmdResume();

  CmdResume(const CmdResume& from);

  inline CmdResume& operator=(const CmdResume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResume& default_instance();

  void Swap(CmdResume* other);

  // implements Message ----------------------------------------------

  inline CmdResume* New() const { return New(NULL); }

  CmdResume* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResume& from);
  void MergeFrom(const CmdResume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:ClioCommand.CmdResume)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  friend void  protobuf_AddDesc_clio_5fcommand_2eproto();
  friend void protobuf_AssignDesc_clio_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_clio_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static CmdResume* default_instance_;
};
// -------------------------------------------------------------------

class ClioCommand : public ::google::protobuf::Message {
 public:
  ClioCommand();
  virtual ~ClioCommand();

  ClioCommand(const ClioCommand& from);

  inline ClioCommand& operator=(const ClioCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClioCommand& default_instance();

  void Swap(ClioCommand* other);

  // implements Message ----------------------------------------------

  inline ClioCommand* New() const { return New(NULL); }

  ClioCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClioCommand& from);
  void MergeFrom(const ClioCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClioCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd_type = 1;
  bool has_cmd_type() const;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::google::protobuf::int32 cmd_type() const;
  void set_cmd_type(::google::protobuf::int32 value);

  // required string cmd_name = 2;
  bool has_cmd_name() const;
  void clear_cmd_name();
  static const int kCmdNameFieldNumber = 2;
  const ::std::string& cmd_name() const;
  void set_cmd_name(const ::std::string& value);
  void set_cmd_name(const char* value);
  void set_cmd_name(const char* value, size_t size);
  ::std::string* mutable_cmd_name();
  ::std::string* release_cmd_name();
  void set_allocated_cmd_name(::std::string* cmd_name);

  // optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
  bool has_cmd_shutdown() const;
  void clear_cmd_shutdown();
  static const int kCmdShutdownFieldNumber = 3;
  const ::ClioCommand::CmdShutdown& cmd_shutdown() const;
  ::ClioCommand::CmdShutdown* mutable_cmd_shutdown();
  ::ClioCommand::CmdShutdown* release_cmd_shutdown();
  void set_allocated_cmd_shutdown(::ClioCommand::CmdShutdown* cmd_shutdown);

  // optional .ClioCommand.CmdSuspend cmd_suspend = 4;
  bool has_cmd_suspend() const;
  void clear_cmd_suspend();
  static const int kCmdSuspendFieldNumber = 4;
  const ::ClioCommand::CmdSuspend& cmd_suspend() const;
  ::ClioCommand::CmdSuspend* mutable_cmd_suspend();
  ::ClioCommand::CmdSuspend* release_cmd_suspend();
  void set_allocated_cmd_suspend(::ClioCommand::CmdSuspend* cmd_suspend);

  // optional .ClioCommand.CmdResume cmd_resume = 5;
  bool has_cmd_resume() const;
  void clear_cmd_resume();
  static const int kCmdResumeFieldNumber = 5;
  const ::ClioCommand::CmdResume& cmd_resume() const;
  ::ClioCommand::CmdResume* mutable_cmd_resume();
  ::ClioCommand::CmdResume* release_cmd_resume();
  void set_allocated_cmd_resume(::ClioCommand::CmdResume* cmd_resume);

  // @@protoc_insertion_point(class_scope:ClioCommand.ClioCommand)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_cmd_name();
  inline void clear_has_cmd_name();
  inline void set_has_cmd_shutdown();
  inline void clear_has_cmd_shutdown();
  inline void set_has_cmd_suspend();
  inline void clear_has_cmd_suspend();
  inline void set_has_cmd_resume();
  inline void clear_has_cmd_resume();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmd_name_;
  ::ClioCommand::CmdShutdown* cmd_shutdown_;
  ::ClioCommand::CmdSuspend* cmd_suspend_;
  ::ClioCommand::CmdResume* cmd_resume_;
  ::google::protobuf::int32 cmd_type_;
  friend void  protobuf_AddDesc_clio_5fcommand_2eproto();
  friend void protobuf_AssignDesc_clio_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_clio_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static ClioCommand* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdShutdown

// optional string reason = 1;
inline bool CmdShutdown::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdShutdown::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdShutdown::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdShutdown::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& CmdShutdown::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdShutdown.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdShutdown::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdShutdown.reason)
}
inline void CmdShutdown::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdShutdown.reason)
}
inline void CmdShutdown::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdShutdown.reason)
}
inline ::std::string* CmdShutdown::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdShutdown.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdShutdown::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdShutdown::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdShutdown.reason)
}

// optional int32 after = 2;
inline bool CmdShutdown::has_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdShutdown::set_has_after() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdShutdown::clear_has_after() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdShutdown::clear_after() {
  after_ = 0;
  clear_has_after();
}
inline ::google::protobuf::int32 CmdShutdown::after() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdShutdown.after)
  return after_;
}
inline void CmdShutdown::set_after(::google::protobuf::int32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdShutdown.after)
}

// -------------------------------------------------------------------

// CmdSuspend

// optional string reason = 1;
inline bool CmdSuspend::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSuspend::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSuspend::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSuspend::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& CmdSuspend::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdSuspend::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.reason)
}
inline void CmdSuspend::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdSuspend.reason)
}
inline void CmdSuspend::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdSuspend.reason)
}
inline ::std::string* CmdSuspend::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdSuspend.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdSuspend::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdSuspend::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdSuspend.reason)
}

// optional int32 after = 2;
inline bool CmdSuspend::has_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSuspend::set_has_after() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSuspend::clear_has_after() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSuspend::clear_after() {
  after_ = 0;
  clear_has_after();
}
inline ::google::protobuf::int32 CmdSuspend::after() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.after)
  return after_;
}
inline void CmdSuspend::set_after(::google::protobuf::int32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.after)
}

// required bool need_notify = 3;
inline bool CmdSuspend::has_need_notify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSuspend::set_has_need_notify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSuspend::clear_has_need_notify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSuspend::clear_need_notify() {
  need_notify_ = false;
  clear_has_need_notify();
}
inline bool CmdSuspend::need_notify() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.need_notify)
  return need_notify_;
}
inline void CmdSuspend::set_need_notify(bool value) {
  set_has_need_notify();
  need_notify_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.need_notify)
}

// -------------------------------------------------------------------

// CmdResume

// optional string reason = 1;
inline bool CmdResume::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResume::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResume::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResume::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& CmdResume::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdResume.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResume::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdResume.reason)
}
inline void CmdResume::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdResume.reason)
}
inline void CmdResume::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdResume.reason)
}
inline ::std::string* CmdResume::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdResume.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResume::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResume::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdResume.reason)
}

// -------------------------------------------------------------------

// ClioCommand

// required int32 cmd_type = 1;
inline bool ClioCommand::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClioCommand::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClioCommand::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClioCommand::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::google::protobuf::int32 ClioCommand::cmd_type() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_type)
  return cmd_type_;
}
inline void ClioCommand::set_cmd_type(::google::protobuf::int32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.ClioCommand.cmd_type)
}

// required string cmd_name = 2;
inline bool ClioCommand::has_cmd_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClioCommand::set_has_cmd_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClioCommand::clear_has_cmd_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClioCommand::clear_cmd_name() {
  cmd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_name();
}
inline const ::std::string& ClioCommand::cmd_name() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_name)
  return cmd_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioCommand::set_cmd_name(const ::std::string& value) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.ClioCommand.cmd_name)
}
inline void ClioCommand::set_cmd_name(const char* value) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.ClioCommand.cmd_name)
}
inline void ClioCommand::set_cmd_name(const char* value, size_t size) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.ClioCommand.cmd_name)
}
inline ::std::string* ClioCommand::mutable_cmd_name() {
  set_has_cmd_name();
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_name)
  return cmd_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClioCommand::release_cmd_name() {
  clear_has_cmd_name();
  return cmd_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClioCommand::set_allocated_cmd_name(::std::string* cmd_name) {
  if (cmd_name != NULL) {
    set_has_cmd_name();
  } else {
    clear_has_cmd_name();
  }
  cmd_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_name);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_name)
}

// optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
inline bool ClioCommand::has_cmd_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClioCommand::set_has_cmd_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClioCommand::clear_has_cmd_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClioCommand::clear_cmd_shutdown() {
  if (cmd_shutdown_ != NULL) cmd_shutdown_->::ClioCommand::CmdShutdown::Clear();
  clear_has_cmd_shutdown();
}
inline const ::ClioCommand::CmdShutdown& ClioCommand::cmd_shutdown() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_shutdown)
  return cmd_shutdown_ != NULL ? *cmd_shutdown_ : *default_instance_->cmd_shutdown_;
}
inline ::ClioCommand::CmdShutdown* ClioCommand::mutable_cmd_shutdown() {
  set_has_cmd_shutdown();
  if (cmd_shutdown_ == NULL) {
    cmd_shutdown_ = new ::ClioCommand::CmdShutdown;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_shutdown)
  return cmd_shutdown_;
}
inline ::ClioCommand::CmdShutdown* ClioCommand::release_cmd_shutdown() {
  clear_has_cmd_shutdown();
  ::ClioCommand::CmdShutdown* temp = cmd_shutdown_;
  cmd_shutdown_ = NULL;
  return temp;
}
inline void ClioCommand::set_allocated_cmd_shutdown(::ClioCommand::CmdShutdown* cmd_shutdown) {
  delete cmd_shutdown_;
  cmd_shutdown_ = cmd_shutdown;
  if (cmd_shutdown) {
    set_has_cmd_shutdown();
  } else {
    clear_has_cmd_shutdown();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_shutdown)
}

// optional .ClioCommand.CmdSuspend cmd_suspend = 4;
inline bool ClioCommand::has_cmd_suspend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClioCommand::set_has_cmd_suspend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClioCommand::clear_has_cmd_suspend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClioCommand::clear_cmd_suspend() {
  if (cmd_suspend_ != NULL) cmd_suspend_->::ClioCommand::CmdSuspend::Clear();
  clear_has_cmd_suspend();
}
inline const ::ClioCommand::CmdSuspend& ClioCommand::cmd_suspend() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_suspend)
  return cmd_suspend_ != NULL ? *cmd_suspend_ : *default_instance_->cmd_suspend_;
}
inline ::ClioCommand::CmdSuspend* ClioCommand::mutable_cmd_suspend() {
  set_has_cmd_suspend();
  if (cmd_suspend_ == NULL) {
    cmd_suspend_ = new ::ClioCommand::CmdSuspend;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_suspend)
  return cmd_suspend_;
}
inline ::ClioCommand::CmdSuspend* ClioCommand::release_cmd_suspend() {
  clear_has_cmd_suspend();
  ::ClioCommand::CmdSuspend* temp = cmd_suspend_;
  cmd_suspend_ = NULL;
  return temp;
}
inline void ClioCommand::set_allocated_cmd_suspend(::ClioCommand::CmdSuspend* cmd_suspend) {
  delete cmd_suspend_;
  cmd_suspend_ = cmd_suspend;
  if (cmd_suspend) {
    set_has_cmd_suspend();
  } else {
    clear_has_cmd_suspend();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_suspend)
}

// optional .ClioCommand.CmdResume cmd_resume = 5;
inline bool ClioCommand::has_cmd_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClioCommand::set_has_cmd_resume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClioCommand::clear_has_cmd_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClioCommand::clear_cmd_resume() {
  if (cmd_resume_ != NULL) cmd_resume_->::ClioCommand::CmdResume::Clear();
  clear_has_cmd_resume();
}
inline const ::ClioCommand::CmdResume& ClioCommand::cmd_resume() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_resume)
  return cmd_resume_ != NULL ? *cmd_resume_ : *default_instance_->cmd_resume_;
}
inline ::ClioCommand::CmdResume* ClioCommand::mutable_cmd_resume() {
  set_has_cmd_resume();
  if (cmd_resume_ == NULL) {
    cmd_resume_ = new ::ClioCommand::CmdResume;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_resume)
  return cmd_resume_;
}
inline ::ClioCommand::CmdResume* ClioCommand::release_cmd_resume() {
  clear_has_cmd_resume();
  ::ClioCommand::CmdResume* temp = cmd_resume_;
  cmd_resume_ = NULL;
  return temp;
}
inline void ClioCommand::set_allocated_cmd_resume(::ClioCommand::CmdResume* cmd_resume) {
  delete cmd_resume_;
  cmd_resume_ = cmd_resume;
  if (cmd_resume) {
    set_has_cmd_resume();
  } else {
    clear_has_cmd_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_resume)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioCommand

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clio_5fcommand_2eproto__INCLUDED
