// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clio_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clio_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClioCommand {

namespace {

const ::google::protobuf::Descriptor* CmdShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdShutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdSuspend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdSuspend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClioCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClioCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_clio_5fcommand_2eproto() {
  protobuf_AddDesc_clio_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "clio_command.proto");
  GOOGLE_CHECK(file != NULL);
  CmdShutdown_descriptor_ = file->message_type(0);
  static const int CmdShutdown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdShutdown, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdShutdown, after_),
  };
  CmdShutdown_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdShutdown_descriptor_,
      CmdShutdown::default_instance_,
      CmdShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdShutdown, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdShutdown),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdShutdown, _internal_metadata_),
      -1);
  CmdSuspend_descriptor_ = file->message_type(1);
  static const int CmdSuspend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdSuspend, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdSuspend, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdSuspend, need_notify_),
  };
  CmdSuspend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdSuspend_descriptor_,
      CmdSuspend::default_instance_,
      CmdSuspend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdSuspend, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdSuspend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdSuspend, _internal_metadata_),
      -1);
  CmdResume_descriptor_ = file->message_type(2);
  static const int CmdResume_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResume, reason_),
  };
  CmdResume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResume_descriptor_,
      CmdResume::default_instance_,
      CmdResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResume, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResume, _internal_metadata_),
      -1);
  ClioCommand_descriptor_ = file->message_type(3);
  static const int ClioCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, cmd_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, cmd_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, cmd_suspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, cmd_resume_),
  };
  ClioCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClioCommand_descriptor_,
      ClioCommand::default_instance_,
      ClioCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClioCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClioCommand, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_clio_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdShutdown_descriptor_, &CmdShutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdSuspend_descriptor_, &CmdSuspend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResume_descriptor_, &CmdResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClioCommand_descriptor_, &ClioCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_clio_5fcommand_2eproto() {
  delete CmdShutdown::default_instance_;
  delete CmdShutdown_reflection_;
  delete CmdSuspend::default_instance_;
  delete CmdSuspend_reflection_;
  delete CmdResume::default_instance_;
  delete CmdResume_reflection_;
  delete ClioCommand::default_instance_;
  delete ClioCommand_reflection_;
}

void protobuf_AddDesc_clio_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022clio_command.proto\022\013ClioCommand\",\n\013Cmd"
    "Shutdown\022\016\n\006reason\030\001 \001(\t\022\r\n\005after\030\002 \001(\005\""
    "@\n\nCmdSuspend\022\016\n\006reason\030\001 \001(\t\022\r\n\005after\030\002"
    " \001(\005\022\023\n\013need_notify\030\003 \002(\010\"\033\n\tCmdResume\022\016"
    "\n\006reason\030\001 \001(\t\"\273\001\n\013ClioCommand\022\020\n\010cmd_ty"
    "pe\030\001 \002(\005\022\020\n\010cmd_name\030\002 \002(\t\022.\n\014cmd_shutdo"
    "wn\030\003 \001(\0132\030.ClioCommand.CmdShutdown\022,\n\013cm"
    "d_suspend\030\004 \001(\0132\027.ClioCommand.CmdSuspend"
    "\022*\n\ncmd_resume\030\005 \001(\0132\026.ClioCommand.CmdRe"
    "sume", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clio_command.proto", &protobuf_RegisterTypes);
  CmdShutdown::default_instance_ = new CmdShutdown();
  CmdSuspend::default_instance_ = new CmdSuspend();
  CmdResume::default_instance_ = new CmdResume();
  ClioCommand::default_instance_ = new ClioCommand();
  CmdShutdown::default_instance_->InitAsDefaultInstance();
  CmdSuspend::default_instance_->InitAsDefaultInstance();
  CmdResume::default_instance_->InitAsDefaultInstance();
  ClioCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_clio_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_clio_5fcommand_2eproto {
  StaticDescriptorInitializer_clio_5fcommand_2eproto() {
    protobuf_AddDesc_clio_5fcommand_2eproto();
  }
} static_descriptor_initializer_clio_5fcommand_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CmdShutdown::kReasonFieldNumber;
const int CmdShutdown::kAfterFieldNumber;
#endif  // !_MSC_VER

CmdShutdown::CmdShutdown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioCommand.CmdShutdown)
}

void CmdShutdown::InitAsDefaultInstance() {
}

CmdShutdown::CmdShutdown(const CmdShutdown& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioCommand.CmdShutdown)
}

void CmdShutdown::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdShutdown::~CmdShutdown() {
  // @@protoc_insertion_point(destructor:ClioCommand.CmdShutdown)
  SharedDtor();
}

void CmdShutdown::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CmdShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdShutdown_descriptor_;
}

const CmdShutdown& CmdShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fcommand_2eproto();
  return *default_instance_;
}

CmdShutdown* CmdShutdown::default_instance_ = NULL;

CmdShutdown* CmdShutdown::New(::google::protobuf::Arena* arena) const {
  CmdShutdown* n = new CmdShutdown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdShutdown::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    after_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioCommand.CmdShutdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioCommand.CmdShutdown.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_after;
        break;
      }

      // optional int32 after = 2;
      case 2: {
        if (tag == 16) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioCommand.CmdShutdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioCommand.CmdShutdown)
  return false;
#undef DO_
}

void CmdShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioCommand.CmdShutdown)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdShutdown.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional int32 after = 2;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->after(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClioCommand.CmdShutdown)
}

::google::protobuf::uint8* CmdShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioCommand.CmdShutdown)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdShutdown.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional int32 after = 2;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->after(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClioCommand.CmdShutdown)
  return target;
}

int CmdShutdown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 after = 2;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->after());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdShutdown* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdShutdown>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdShutdown::MergeFrom(const CmdShutdown& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdShutdown::CopyFrom(const CmdShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdShutdown::IsInitialized() const {

  return true;
}

void CmdShutdown::Swap(CmdShutdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdShutdown::InternalSwap(CmdShutdown* other) {
  reason_.Swap(&other->reason_);
  std::swap(after_, other->after_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdShutdown_descriptor_;
  metadata.reflection = CmdShutdown_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdShutdown

// optional string reason = 1;
bool CmdShutdown::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdShutdown::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdShutdown::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdShutdown::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& CmdShutdown::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdShutdown.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdShutdown::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdShutdown.reason)
}
 void CmdShutdown::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdShutdown.reason)
}
 void CmdShutdown::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdShutdown.reason)
}
 ::std::string* CmdShutdown::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdShutdown.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdShutdown::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdShutdown::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdShutdown.reason)
}

// optional int32 after = 2;
bool CmdShutdown::has_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdShutdown::set_has_after() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdShutdown::clear_has_after() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdShutdown::clear_after() {
  after_ = 0;
  clear_has_after();
}
 ::google::protobuf::int32 CmdShutdown::after() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdShutdown.after)
  return after_;
}
 void CmdShutdown::set_after(::google::protobuf::int32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdShutdown.after)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CmdSuspend::kReasonFieldNumber;
const int CmdSuspend::kAfterFieldNumber;
const int CmdSuspend::kNeedNotifyFieldNumber;
#endif  // !_MSC_VER

CmdSuspend::CmdSuspend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioCommand.CmdSuspend)
}

void CmdSuspend::InitAsDefaultInstance() {
}

CmdSuspend::CmdSuspend(const CmdSuspend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioCommand.CmdSuspend)
}

void CmdSuspend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_ = 0;
  need_notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdSuspend::~CmdSuspend() {
  // @@protoc_insertion_point(destructor:ClioCommand.CmdSuspend)
  SharedDtor();
}

void CmdSuspend::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CmdSuspend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdSuspend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdSuspend_descriptor_;
}

const CmdSuspend& CmdSuspend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fcommand_2eproto();
  return *default_instance_;
}

CmdSuspend* CmdSuspend::default_instance_ = NULL;

CmdSuspend* CmdSuspend::New(::google::protobuf::Arena* arena) const {
  CmdSuspend* n = new CmdSuspend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdSuspend::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdSuspend*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(after_, need_notify_);
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdSuspend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioCommand.CmdSuspend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioCommand.CmdSuspend.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_after;
        break;
      }

      // optional int32 after = 2;
      case 2: {
        if (tag == 16) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_notify;
        break;
      }

      // required bool need_notify = 3;
      case 3: {
        if (tag == 24) {
         parse_need_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_notify_)));
          set_has_need_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioCommand.CmdSuspend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioCommand.CmdSuspend)
  return false;
#undef DO_
}

void CmdSuspend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioCommand.CmdSuspend)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdSuspend.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional int32 after = 2;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->after(), output);
  }

  // required bool need_notify = 3;
  if (has_need_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_notify(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClioCommand.CmdSuspend)
}

::google::protobuf::uint8* CmdSuspend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioCommand.CmdSuspend)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdSuspend.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional int32 after = 2;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->after(), target);
  }

  // required bool need_notify = 3;
  if (has_need_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_notify(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClioCommand.CmdSuspend)
  return target;
}

int CmdSuspend::ByteSize() const {
  int total_size = 0;

  // required bool need_notify = 3;
  if (has_need_notify()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 after = 2;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->after());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdSuspend::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdSuspend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSuspend>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdSuspend::MergeFrom(const CmdSuspend& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_after()) {
      set_after(from.after());
    }
    if (from.has_need_notify()) {
      set_need_notify(from.need_notify());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdSuspend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSuspend::CopyFrom(const CmdSuspend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSuspend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void CmdSuspend::Swap(CmdSuspend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSuspend::InternalSwap(CmdSuspend* other) {
  reason_.Swap(&other->reason_);
  std::swap(after_, other->after_);
  std::swap(need_notify_, other->need_notify_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdSuspend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdSuspend_descriptor_;
  metadata.reflection = CmdSuspend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdSuspend

// optional string reason = 1;
bool CmdSuspend::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdSuspend::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdSuspend::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdSuspend::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& CmdSuspend::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdSuspend::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.reason)
}
 void CmdSuspend::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdSuspend.reason)
}
 void CmdSuspend::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdSuspend.reason)
}
 ::std::string* CmdSuspend::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdSuspend.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdSuspend::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdSuspend::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdSuspend.reason)
}

// optional int32 after = 2;
bool CmdSuspend::has_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdSuspend::set_has_after() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdSuspend::clear_has_after() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdSuspend::clear_after() {
  after_ = 0;
  clear_has_after();
}
 ::google::protobuf::int32 CmdSuspend::after() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.after)
  return after_;
}
 void CmdSuspend::set_after(::google::protobuf::int32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.after)
}

// required bool need_notify = 3;
bool CmdSuspend::has_need_notify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdSuspend::set_has_need_notify() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdSuspend::clear_has_need_notify() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdSuspend::clear_need_notify() {
  need_notify_ = false;
  clear_has_need_notify();
}
 bool CmdSuspend::need_notify() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdSuspend.need_notify)
  return need_notify_;
}
 void CmdSuspend::set_need_notify(bool value) {
  set_has_need_notify();
  need_notify_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.CmdSuspend.need_notify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CmdResume::kReasonFieldNumber;
#endif  // !_MSC_VER

CmdResume::CmdResume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioCommand.CmdResume)
}

void CmdResume::InitAsDefaultInstance() {
}

CmdResume::CmdResume(const CmdResume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioCommand.CmdResume)
}

void CmdResume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResume::~CmdResume() {
  // @@protoc_insertion_point(destructor:ClioCommand.CmdResume)
  SharedDtor();
}

void CmdResume::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CmdResume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResume_descriptor_;
}

const CmdResume& CmdResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fcommand_2eproto();
  return *default_instance_;
}

CmdResume* CmdResume::default_instance_ = NULL;

CmdResume* CmdResume::New(::google::protobuf::Arena* arena) const {
  CmdResume* n = new CmdResume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResume::Clear() {
  if (has_reason()) {
    reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioCommand.CmdResume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioCommand.CmdResume.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioCommand.CmdResume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioCommand.CmdResume)
  return false;
#undef DO_
}

void CmdResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioCommand.CmdResume)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdResume.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClioCommand.CmdResume)
}

::google::protobuf::uint8* CmdResume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioCommand.CmdResume)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.CmdResume.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClioCommand.CmdResume)
  return target;
}

int CmdResume::ByteSize() const {
  int total_size = 0;

  // optional string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResume::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdResume* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResume>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResume::MergeFrom(const CmdResume& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResume::CopyFrom(const CmdResume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResume::IsInitialized() const {

  return true;
}

void CmdResume::Swap(CmdResume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResume::InternalSwap(CmdResume* other) {
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResume_descriptor_;
  metadata.reflection = CmdResume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdResume

// optional string reason = 1;
bool CmdResume::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResume::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResume::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResume::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& CmdResume::reason() const {
  // @@protoc_insertion_point(field_get:ClioCommand.CmdResume.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResume::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.CmdResume.reason)
}
 void CmdResume::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.CmdResume.reason)
}
 void CmdResume::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.CmdResume.reason)
}
 ::std::string* CmdResume::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ClioCommand.CmdResume.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResume::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResume::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.CmdResume.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClioCommand::kCmdTypeFieldNumber;
const int ClioCommand::kCmdNameFieldNumber;
const int ClioCommand::kCmdShutdownFieldNumber;
const int ClioCommand::kCmdSuspendFieldNumber;
const int ClioCommand::kCmdResumeFieldNumber;
#endif  // !_MSC_VER

ClioCommand::ClioCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClioCommand.ClioCommand)
}

void ClioCommand::InitAsDefaultInstance() {
  cmd_shutdown_ = const_cast< ::ClioCommand::CmdShutdown*>(&::ClioCommand::CmdShutdown::default_instance());
  cmd_suspend_ = const_cast< ::ClioCommand::CmdSuspend*>(&::ClioCommand::CmdSuspend::default_instance());
  cmd_resume_ = const_cast< ::ClioCommand::CmdResume*>(&::ClioCommand::CmdResume::default_instance());
}

ClioCommand::ClioCommand(const ClioCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClioCommand.ClioCommand)
}

void ClioCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_type_ = 0;
  cmd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_shutdown_ = NULL;
  cmd_suspend_ = NULL;
  cmd_resume_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClioCommand::~ClioCommand() {
  // @@protoc_insertion_point(destructor:ClioCommand.ClioCommand)
  SharedDtor();
}

void ClioCommand::SharedDtor() {
  cmd_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cmd_shutdown_;
    delete cmd_suspend_;
    delete cmd_resume_;
  }
}

void ClioCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClioCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClioCommand_descriptor_;
}

const ClioCommand& ClioCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clio_5fcommand_2eproto();
  return *default_instance_;
}

ClioCommand* ClioCommand::default_instance_ = NULL;

ClioCommand* ClioCommand::New(::google::protobuf::Arena* arena) const {
  ClioCommand* n = new ClioCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClioCommand::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    cmd_type_ = 0;
    if (has_cmd_name()) {
      cmd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cmd_shutdown()) {
      if (cmd_shutdown_ != NULL) cmd_shutdown_->::ClioCommand::CmdShutdown::Clear();
    }
    if (has_cmd_suspend()) {
      if (cmd_suspend_ != NULL) cmd_suspend_->::ClioCommand::CmdSuspend::Clear();
    }
    if (has_cmd_resume()) {
      if (cmd_resume_ != NULL) cmd_resume_->::ClioCommand::CmdResume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClioCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClioCommand.ClioCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd_name;
        break;
      }

      // required string cmd_name = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd_name().data(), this->cmd_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ClioCommand.ClioCommand.cmd_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_shutdown;
        break;
      }

      // optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_shutdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_shutdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd_suspend;
        break;
      }

      // optional .ClioCommand.CmdSuspend cmd_suspend = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd_suspend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_suspend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cmd_resume;
        break;
      }

      // optional .ClioCommand.CmdResume cmd_resume = 5;
      case 5: {
        if (tag == 42) {
         parse_cmd_resume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClioCommand.ClioCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClioCommand.ClioCommand)
  return false;
#undef DO_
}

void ClioCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClioCommand.ClioCommand)
  // required int32 cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_type(), output);
  }

  // required string cmd_name = 2;
  if (has_cmd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd_name().data(), this->cmd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.ClioCommand.cmd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd_name(), output);
  }

  // optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
  if (has_cmd_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_shutdown_, output);
  }

  // optional .ClioCommand.CmdSuspend cmd_suspend = 4;
  if (has_cmd_suspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cmd_suspend_, output);
  }

  // optional .ClioCommand.CmdResume cmd_resume = 5;
  if (has_cmd_resume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_resume_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClioCommand.ClioCommand)
}

::google::protobuf::uint8* ClioCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClioCommand.ClioCommand)
  // required int32 cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_type(), target);
  }

  // required string cmd_name = 2;
  if (has_cmd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd_name().data(), this->cmd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ClioCommand.ClioCommand.cmd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd_name(), target);
  }

  // optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
  if (has_cmd_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cmd_shutdown_, target);
  }

  // optional .ClioCommand.CmdSuspend cmd_suspend = 4;
  if (has_cmd_suspend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->cmd_suspend_, target);
  }

  // optional .ClioCommand.CmdResume cmd_resume = 5;
  if (has_cmd_resume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->cmd_resume_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClioCommand.ClioCommand)
  return target;
}

int ClioCommand::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_cmd_type()) {
    // required int32 cmd_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd_type());
  }

  if (has_cmd_name()) {
    // required string cmd_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd_name());
  }

  return total_size;
}
int ClioCommand::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 cmd_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd_type());

    // required string cmd_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
    if (has_cmd_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_shutdown_);
    }

    // optional .ClioCommand.CmdSuspend cmd_suspend = 4;
    if (has_cmd_suspend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_suspend_);
    }

    // optional .ClioCommand.CmdResume cmd_resume = 5;
    if (has_cmd_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_resume_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClioCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClioCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClioCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClioCommand::MergeFrom(const ClioCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_cmd_name()) {
      set_has_cmd_name();
      cmd_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_name_);
    }
    if (from.has_cmd_shutdown()) {
      mutable_cmd_shutdown()->::ClioCommand::CmdShutdown::MergeFrom(from.cmd_shutdown());
    }
    if (from.has_cmd_suspend()) {
      mutable_cmd_suspend()->::ClioCommand::CmdSuspend::MergeFrom(from.cmd_suspend());
    }
    if (from.has_cmd_resume()) {
      mutable_cmd_resume()->::ClioCommand::CmdResume::MergeFrom(from.cmd_resume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClioCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClioCommand::CopyFrom(const ClioCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClioCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cmd_suspend()) {
    if (!this->cmd_suspend_->IsInitialized()) return false;
  }
  return true;
}

void ClioCommand::Swap(ClioCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClioCommand::InternalSwap(ClioCommand* other) {
  std::swap(cmd_type_, other->cmd_type_);
  cmd_name_.Swap(&other->cmd_name_);
  std::swap(cmd_shutdown_, other->cmd_shutdown_);
  std::swap(cmd_suspend_, other->cmd_suspend_);
  std::swap(cmd_resume_, other->cmd_resume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClioCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClioCommand_descriptor_;
  metadata.reflection = ClioCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClioCommand

// required int32 cmd_type = 1;
bool ClioCommand::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClioCommand::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClioCommand::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClioCommand::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
 ::google::protobuf::int32 ClioCommand::cmd_type() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_type)
  return cmd_type_;
}
 void ClioCommand::set_cmd_type(::google::protobuf::int32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:ClioCommand.ClioCommand.cmd_type)
}

// required string cmd_name = 2;
bool ClioCommand::has_cmd_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClioCommand::set_has_cmd_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ClioCommand::clear_has_cmd_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClioCommand::clear_cmd_name() {
  cmd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_name();
}
 const ::std::string& ClioCommand::cmd_name() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_name)
  return cmd_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioCommand::set_cmd_name(const ::std::string& value) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClioCommand.ClioCommand.cmd_name)
}
 void ClioCommand::set_cmd_name(const char* value) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClioCommand.ClioCommand.cmd_name)
}
 void ClioCommand::set_cmd_name(const char* value, size_t size) {
  set_has_cmd_name();
  cmd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClioCommand.ClioCommand.cmd_name)
}
 ::std::string* ClioCommand::mutable_cmd_name() {
  set_has_cmd_name();
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_name)
  return cmd_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClioCommand::release_cmd_name() {
  clear_has_cmd_name();
  return cmd_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClioCommand::set_allocated_cmd_name(::std::string* cmd_name) {
  if (cmd_name != NULL) {
    set_has_cmd_name();
  } else {
    clear_has_cmd_name();
  }
  cmd_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_name);
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_name)
}

// optional .ClioCommand.CmdShutdown cmd_shutdown = 3;
bool ClioCommand::has_cmd_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClioCommand::set_has_cmd_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
void ClioCommand::clear_has_cmd_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClioCommand::clear_cmd_shutdown() {
  if (cmd_shutdown_ != NULL) cmd_shutdown_->::ClioCommand::CmdShutdown::Clear();
  clear_has_cmd_shutdown();
}
 const ::ClioCommand::CmdShutdown& ClioCommand::cmd_shutdown() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_shutdown)
  return cmd_shutdown_ != NULL ? *cmd_shutdown_ : *default_instance_->cmd_shutdown_;
}
 ::ClioCommand::CmdShutdown* ClioCommand::mutable_cmd_shutdown() {
  set_has_cmd_shutdown();
  if (cmd_shutdown_ == NULL) {
    cmd_shutdown_ = new ::ClioCommand::CmdShutdown;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_shutdown)
  return cmd_shutdown_;
}
 ::ClioCommand::CmdShutdown* ClioCommand::release_cmd_shutdown() {
  clear_has_cmd_shutdown();
  ::ClioCommand::CmdShutdown* temp = cmd_shutdown_;
  cmd_shutdown_ = NULL;
  return temp;
}
 void ClioCommand::set_allocated_cmd_shutdown(::ClioCommand::CmdShutdown* cmd_shutdown) {
  delete cmd_shutdown_;
  cmd_shutdown_ = cmd_shutdown;
  if (cmd_shutdown) {
    set_has_cmd_shutdown();
  } else {
    clear_has_cmd_shutdown();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_shutdown)
}

// optional .ClioCommand.CmdSuspend cmd_suspend = 4;
bool ClioCommand::has_cmd_suspend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClioCommand::set_has_cmd_suspend() {
  _has_bits_[0] |= 0x00000008u;
}
void ClioCommand::clear_has_cmd_suspend() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClioCommand::clear_cmd_suspend() {
  if (cmd_suspend_ != NULL) cmd_suspend_->::ClioCommand::CmdSuspend::Clear();
  clear_has_cmd_suspend();
}
 const ::ClioCommand::CmdSuspend& ClioCommand::cmd_suspend() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_suspend)
  return cmd_suspend_ != NULL ? *cmd_suspend_ : *default_instance_->cmd_suspend_;
}
 ::ClioCommand::CmdSuspend* ClioCommand::mutable_cmd_suspend() {
  set_has_cmd_suspend();
  if (cmd_suspend_ == NULL) {
    cmd_suspend_ = new ::ClioCommand::CmdSuspend;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_suspend)
  return cmd_suspend_;
}
 ::ClioCommand::CmdSuspend* ClioCommand::release_cmd_suspend() {
  clear_has_cmd_suspend();
  ::ClioCommand::CmdSuspend* temp = cmd_suspend_;
  cmd_suspend_ = NULL;
  return temp;
}
 void ClioCommand::set_allocated_cmd_suspend(::ClioCommand::CmdSuspend* cmd_suspend) {
  delete cmd_suspend_;
  cmd_suspend_ = cmd_suspend;
  if (cmd_suspend) {
    set_has_cmd_suspend();
  } else {
    clear_has_cmd_suspend();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_suspend)
}

// optional .ClioCommand.CmdResume cmd_resume = 5;
bool ClioCommand::has_cmd_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClioCommand::set_has_cmd_resume() {
  _has_bits_[0] |= 0x00000010u;
}
void ClioCommand::clear_has_cmd_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClioCommand::clear_cmd_resume() {
  if (cmd_resume_ != NULL) cmd_resume_->::ClioCommand::CmdResume::Clear();
  clear_has_cmd_resume();
}
 const ::ClioCommand::CmdResume& ClioCommand::cmd_resume() const {
  // @@protoc_insertion_point(field_get:ClioCommand.ClioCommand.cmd_resume)
  return cmd_resume_ != NULL ? *cmd_resume_ : *default_instance_->cmd_resume_;
}
 ::ClioCommand::CmdResume* ClioCommand::mutable_cmd_resume() {
  set_has_cmd_resume();
  if (cmd_resume_ == NULL) {
    cmd_resume_ = new ::ClioCommand::CmdResume;
  }
  // @@protoc_insertion_point(field_mutable:ClioCommand.ClioCommand.cmd_resume)
  return cmd_resume_;
}
 ::ClioCommand::CmdResume* ClioCommand::release_cmd_resume() {
  clear_has_cmd_resume();
  ::ClioCommand::CmdResume* temp = cmd_resume_;
  cmd_resume_ = NULL;
  return temp;
}
 void ClioCommand::set_allocated_cmd_resume(::ClioCommand::CmdResume* cmd_resume) {
  delete cmd_resume_;
  cmd_resume_ = cmd_resume;
  if (cmd_resume) {
    set_has_cmd_resume();
  } else {
    clear_has_cmd_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:ClioCommand.ClioCommand.cmd_resume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClioCommand

// @@protoc_insertion_point(global_scope)
