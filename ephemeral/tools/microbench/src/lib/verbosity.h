#ifndef VERBOSITY_H
#define VERBOSITY_H

#include <stdarg.h>

/* Verbosity is in four levels:                                              */
#define VL_JSTASKN  -1      /* Passed to SetVerbosityLevel to query          */
#define VL_SILENCE  0       /* NEVER say ANYTHING                            */
#define VL_NORMALV  1       /* Only error messages                           */
#define VL_VERBOSE  2       /* All messages --> verbose                      */
#define VL_DBG_MSG  3       /* Show debug messages                           */
#define VL_DEFAULT  VL_NORMALV

/* =========================================================================
 * Name: SetVerbosityLevel
 * Description: Set the level of output verbosity for print functions below
 * Paramaters: One of the #define levels just above this prototype
 * Returns: Previous value on change or query (VL_JSTASKN), -1 on error.
 * Side Effects: May change the verbosity level
 * Notes: This is a "public" function, but really is only called within the 
 *        library by the parsing section of the code. ---> It is called on
 *        the module developers behalf. It is made "public" here to allow
 *        module developers to force change verbosity levels based on other
 *        conditions (than the "set VERBOSITY" option). 
 *
 *        The verbosity levels are defined above as VL_???????.
 *
 *        VL_JSTASKN is not a verbosity level but a query. It will not
 *        modify the verbosity of output.
 *
 *        This is called on the module developers behalf by the ReadOptions()
 *        library function.
 */
int SetVerbosityLevel(int vlevel);

/* ========================================================================= */
/* How this works

   API              VL_SILENCE   VL_NORMALV   VL_VERBOSE   VL_DBG_MSG   stream
   VerboseMessage()   No-Op        No-Op        Prints       Prints     stdout
   ErrorMessage()     No-Op        Prints       Prints       Prints     stderr
   DebugMessage()     No-Op        No-Op        No-Op        Prints     stderr
*/

/* =========================================================================
 * Name: VerboseMessage
 * Description: Used to print messages when you are being chatty about things
 * Paramaters: Works just like printf()
 * Returns: Nothing of consequence
 * Side Effects: May send output to stdout
 * Notes: If a CR is not supplied then use VerboseFlush() if you need output
 *        to be immediately visible or sent to a file.
 */
int VerboseMessage(const char *format, ...);

/* =========================================================================
 * Name: VerboseFlush
 * Description: Conditionally call fflush() (based on verbosity level)
 * Paramaters: None
 * Returns: Noting of consequence
 * Side Effects: May flush output stream
 * Notes: Used in conjunction with VerboseMessage() for explicit flushes
 */
int VerboseFlush(void);

/* =========================================================================
 * Name: ErrorMessage
 * Description: Print error messages to stderr
 * Paramaters: Works just like printf() 
 * Returns: Nothing of consequence
 * Side Effects: May print to stderr
 * Notes: Use this to print error messages. The recommended format is:
 *        "ERROR: Text that specifically and uniquely describes the error"
 *          -- or --
 *        "ERROR: A multi line text description of the error that has an"
 *        "    appropriate indent (4 spaces) on all lines of the error"
 *        "    message that follow the first line."
 */
int ErrorMessage(const char *format, ...);

/* =========================================================================
 * Name: DebugMessage
 * Description: Messages that will only be printed in VL_DBG_MSG mode
 * Paramaters: Works just like printf()
 * Returns: Nothing of consequence
 * Side Effects: May print to stderr
 * Notes: This API only prints in maximum verbosity mode. Note that it may
 *        conflict with other verbosity levels. For example this output:
 *
 *        Putting foo into the bar.........Done.
 *
 *        Might be generated by the following API usage:
 *
 *        VerboseMessage("Putting foo into the bar...");
 *        VerboseFlush();
 *        while ( un_bared_foo > 0 )
 *        {
 *           foo_to_bar();
 *           DebugMessage(".");
 *        }
 *        VerboseMessage("Done.\n");
 *
 *        In this example output is consistent in all verbosity levels.
 *        The debug output is very subtle (an extra "." for each loop).
 *        The point here being that it should not look like:
 *
 *        Putting foo into the bar...DEBUG: Putting foo into bar
 *        DEBUG: Putting foo into bar
 *        DEBUG: Putting foo into bar
 *        DEBUG: Putting foo into bar
 *        DEBUG: Putting foo into bar
 *        Done.
 */
int DebugMessage(const char *format, ...);

/* =========================================================================
 * Name: ReportStart
 * Description: Notify the user that the module has started.
 * Paramaters: String - The name of the module
 *             String - (Optional) - The version number (in string form). If
 *                 NULL then the VERSION_STRING define will be used.
 *             String - (Optional) - A short (< 70 char) description of
 *                 the module.
 * Returns: Nothing of consequence
 * Side Effects: May print to stdout
 * Notes: This will only print if in VL_VERBOSE or greater. The module name
 *        and the version will print on the first line; the (optional) 
 *        description will be on the second.
 */
int ReportStart(char *module_name, char *module_version, char *module_description);

#endif


